{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"C:\\Users\\zianz\\OneDrive\\Documents\\GitHub\\X\\app\\packages\\accounts-password\\password_client.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"packages/accounts-password/password_client.js","filename":"C:\\Users\\zianz\\OneDrive\\Documents\\GitHub\\X\\app\\packages\\accounts-password\\password_client.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"C:\\Users\\zianz\\OneDrive\\Documents\\GitHub\\X\\app","root":"C:\\Users\\zianz\\OneDrive\\Documents\\GitHub\\X\\app","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"C:\\Users\\zianz\\OneDrive\\Documents\\GitHub\\X\\app\\packages\\accounts-password\\password_client.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/accounts-password/password_client.js"}},"code":"let _objectSpread;\n\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n\n}, 0);\n\n// Used in the various functions below to handle errors consistently\nconst reportError = (error, callback) => {\n  if (callback) {\n    callback(error);\n  } else {\n    throw error;\n  }\n};\n\nconst internalLoginWithPassword = _ref => {\n  let {\n    selector,\n    password,\n    code,\n    callback\n  } = _ref;\n  if (typeof selector === 'string') if (!selector.includes('@')) selector = {\n    username: selector\n  };else selector = {\n    email: selector\n  };\n  Accounts.callLoginMethod({\n    methodArguments: [{\n      user: selector,\n      password: Accounts._hashPassword(password),\n      code\n    }],\n    userCallback: (error, result) => {\n      if (error) {\n        reportError(error, callback);\n      } else {\n        callback && callback();\n      }\n    }\n  });\n  return selector;\n}; // Attempt to log in with a password.\n//\n// @param selector {String|Object} One of the following:\n//   - {username: (username)}\n//   - {email: (email)}\n//   - a string which may be a username or email, depending on whether\n//     it contains \"@\".\n// @param password {String}\n// @param callback {Function(error|undefined)}\n\n/**\n * @summary Log the user in with a password.\n * @locus Client\n * @param {Object | String} selector\n *   Either a string interpreted as a username or an email; or an object with a\n *   single key: `email`, `username` or `id`. Username or email match in a case\n *   insensitive manner.\n * @param {String} password The user's password.\n * @param {Function} [callback] Optional callback.\n *   Called with no arguments on success, or with a single `Error` argument\n *   on failure.\n * @importFromPackage meteor\n */\n\n\nMeteor.loginWithPassword = (selector, password, callback) => {\n  return internalLoginWithPassword({\n    selector,\n    password,\n    callback\n  });\n};\n\nAccounts._hashPassword = password => ({\n  digest: SHA256(password),\n  algorithm: \"sha-256\"\n});\n/**\n * @summary Log the user in with a password and token.\n * @locus Client\n * @param {Object | String} selector\n *   Either a string interpreted as a username or an email; or an object with a\n *   single key: `email`, `username` or `id`. Username or email match in a case\n *   insensitive manner.\n * @param {String} password The user's password.\n * @param {String} token Token provide by the user's authenticator app.\n * @param {Function} [callback] Optional callback.\n *   Called with no arguments on success, or with a single `Error` argument\n *   on failure.\n * @importFromPackage meteor\n */\n\n\nMeteor.loginWithPasswordAnd2faCode = (selector, password, code, callback) => {\n  if (code == null || typeof code !== 'string' || !code) {\n    throw new Meteor.Error(400, 'token is required to use loginWithPasswordAnd2faCode and must be a string');\n  }\n\n  return internalLoginWithPassword({\n    selector,\n    password,\n    code,\n    callback\n  });\n}; // Attempt to log in as a new user.\n\n/**\n * @summary Create a new user.\n * @locus Anywhere\n * @param {Object} options\n * @param {String} options.username A unique name for this user.\n * @param {String} options.email The user's email address.\n * @param {String} options.password The user's password. This is __not__ sent in plain text over the wire.\n * @param {Object} options.profile The user's profile, typically including the `name` field.\n * @param {Function} [callback] Client only, optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n * @importFromPackage accounts-base\n */\n\n\nAccounts.createUser = (options, callback) => {\n  options = _objectSpread({}, options); // we'll be modifying options\n\n  if (typeof options.password !== 'string') throw new Error(\"options.password must be a string\");\n\n  if (!options.password) {\n    return reportError(new Meteor.Error(400, \"Password may not be empty\"), callback);\n  } // Replace password with the hashed password.\n\n\n  options.password = Accounts._hashPassword(options.password);\n  Accounts.callLoginMethod({\n    methodName: 'createUser',\n    methodArguments: [options],\n    userCallback: callback\n  });\n}; // Change password. Must be logged in.\n//\n// @param oldPassword {String|null} By default servers no longer allow\n//   changing password without the old password, but they could so we\n//   support passing no password to the server and letting it decide.\n// @param newPassword {String}\n// @param callback {Function(error|undefined)}\n\n/**\n * @summary Change the current user's password. Must be logged in.\n * @locus Client\n * @param {String} oldPassword The user's current password. This is __not__ sent in plain text over the wire.\n * @param {String} newPassword A new password for the user. This is __not__ sent in plain text over the wire.\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n * @importFromPackage accounts-base\n */\n\n\nAccounts.changePassword = (oldPassword, newPassword, callback) => {\n  if (!Meteor.user()) {\n    return reportError(new Error(\"Must be logged in to change password.\"), callback);\n  }\n\n  if (!newPassword instanceof String) {\n    return reportError(new Meteor.Error(400, \"Password must be a string\"), callback);\n  }\n\n  if (!newPassword) {\n    return reportError(new Meteor.Error(400, \"Password may not be empty\"), callback);\n  }\n\n  Accounts.connection.apply('changePassword', [oldPassword ? Accounts._hashPassword(oldPassword) : null, Accounts._hashPassword(newPassword)], (error, result) => {\n    if (error || !result) {\n      // A normal error, not an error telling us to upgrade to bcrypt\n      reportError(error || new Error(\"No result from changePassword.\"), callback);\n    } else {\n      callback && callback();\n    }\n  });\n}; // Sends an email to a user with a link that can be used to reset\n// their password\n//\n// @param options {Object}\n//   - email: (email)\n// @param callback (optional) {Function(error|undefined)}\n\n/**\n * @summary Request a forgot password email.\n * @locus Client\n * @param {Object} options\n * @param {String} options.email The email address to send a password reset link.\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n * @importFromPackage accounts-base\n */\n\n\nAccounts.forgotPassword = (options, callback) => {\n  if (!options.email) {\n    return reportError(new Meteor.Error(400, \"Must pass options.email\"), callback);\n  }\n\n  if (callback) {\n    Accounts.connection.call(\"forgotPassword\", options, callback);\n  } else {\n    Accounts.connection.call(\"forgotPassword\", options);\n  }\n}; // Resets a password based on a token originally created by\n// Accounts.forgotPassword, and then logs in the matching user.\n//\n// @param token {String}\n// @param newPassword {String}\n// @param callback (optional) {Function(error|undefined)}\n\n/**\n * @summary Reset the password for a user using a token received in email. Logs the user in afterwards.\n * @locus Client\n * @param {String} token The token retrieved from the reset password URL.\n * @param {String} newPassword A new password for the user. This is __not__ sent in plain text over the wire.\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n * @importFromPackage accounts-base\n */\n\n\nAccounts.resetPassword = (token, newPassword, callback) => {\n  if (!token instanceof String) {\n    return reportError(new Meteor.Error(400, \"Token must be a string\"), callback);\n  }\n\n  if (!newPassword instanceof String) {\n    return reportError(new Meteor.Error(400, \"Password must be a string\"), callback);\n  }\n\n  if (!newPassword) {\n    return reportError(new Meteor.Error(400, \"Password may not be empty\"), callback);\n  }\n\n  Accounts.callLoginMethod({\n    methodName: 'resetPassword',\n    methodArguments: [token, Accounts._hashPassword(newPassword)],\n    userCallback: callback\n  });\n}; // Verifies a user's email address based on a token originally\n// created by Accounts.sendVerificationEmail\n//\n// @param token {String}\n// @param callback (optional) {Function(error|undefined)}\n\n/**\n * @summary Marks the user's email address as verified. Logs the user in afterwards.\n * @locus Client\n * @param {String} token The token retrieved from the verification URL.\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n * @importFromPackage accounts-base\n */\n\n\nAccounts.verifyEmail = (token, callback) => {\n  if (!token) {\n    return reportError(new Meteor.Error(400, \"Need to pass token\"), callback);\n  }\n\n  Accounts.callLoginMethod({\n    methodName: 'verifyEmail',\n    methodArguments: [token],\n    userCallback: callback\n  });\n};","map":{"version":3,"sources":["packages/accounts-password/password_client.js"],"names":["_objectSpread","module","link","default","v","reportError","error","callback","internalLoginWithPassword","selector","password","code","includes","username","email","Accounts","callLoginMethod","methodArguments","user","_hashPassword","userCallback","result","Meteor","loginWithPassword","digest","SHA256","algorithm","loginWithPasswordAnd2faCode","Error","createUser","options","methodName","changePassword","oldPassword","newPassword","String","connection","apply","forgotPassword","call","resetPassword","token","verifyEmail"],"mappings":"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","sourcesContent":["// Used in the various functions below to handle errors consistently\nconst reportError = (error, callback) => {\n   if (callback) {\n     callback(error);\n   } else {\n     throw error;\n   }\n};\n\n\nconst internalLoginWithPassword = ({ selector, password, code, callback }) => {\n  if (typeof selector === 'string')\n    if (!selector.includes('@')) selector = { username: selector };\n    else selector = { email: selector };\n\n  Accounts.callLoginMethod({\n    methodArguments: [\n      {\n        user: selector,\n        password: Accounts._hashPassword(password),\n        code,\n      },\n    ],\n    userCallback: (error, result) => {\n      if (error) {\n        reportError(error, callback);\n      } else {\n        callback && callback();\n      }\n    },\n  });\n  return selector;\n};\n\n// Attempt to log in with a password.\n//\n// @param selector {String|Object} One of the following:\n//   - {username: (username)}\n//   - {email: (email)}\n//   - a string which may be a username or email, depending on whether\n//     it contains \"@\".\n// @param password {String}\n// @param callback {Function(error|undefined)}\n\n/**\n * @summary Log the user in with a password.\n * @locus Client\n * @param {Object | String} selector\n *   Either a string interpreted as a username or an email; or an object with a\n *   single key: `email`, `username` or `id`. Username or email match in a case\n *   insensitive manner.\n * @param {String} password The user's password.\n * @param {Function} [callback] Optional callback.\n *   Called with no arguments on success, or with a single `Error` argument\n *   on failure.\n * @importFromPackage meteor\n */\nMeteor.loginWithPassword = (selector, password, callback) => {\n  return internalLoginWithPassword({ selector, password, callback });\n};\n\nAccounts._hashPassword = password => ({\n  digest: SHA256(password),\n  algorithm: \"sha-256\"\n});\n\n\n/**\n * @summary Log the user in with a password and token.\n * @locus Client\n * @param {Object | String} selector\n *   Either a string interpreted as a username or an email; or an object with a\n *   single key: `email`, `username` or `id`. Username or email match in a case\n *   insensitive manner.\n * @param {String} password The user's password.\n * @param {String} token Token provide by the user's authenticator app.\n * @param {Function} [callback] Optional callback.\n *   Called with no arguments on success, or with a single `Error` argument\n *   on failure.\n * @importFromPackage meteor\n */\n\nMeteor.loginWithPasswordAnd2faCode = (selector, password, code, callback) => {\n  if (code == null || typeof code !== 'string' || !code) {\n    throw new Meteor.Error(\n      400,\n      'token is required to use loginWithPasswordAnd2faCode and must be a string'\n    );\n  }\n  return internalLoginWithPassword({ selector, password, code, callback });\n};\n\n\n// Attempt to log in as a new user.\n\n/**\n * @summary Create a new user.\n * @locus Anywhere\n * @param {Object} options\n * @param {String} options.username A unique name for this user.\n * @param {String} options.email The user's email address.\n * @param {String} options.password The user's password. This is __not__ sent in plain text over the wire.\n * @param {Object} options.profile The user's profile, typically including the `name` field.\n * @param {Function} [callback] Client only, optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n * @importFromPackage accounts-base\n */\nAccounts.createUser = (options, callback) => {\n  options = { ...options }; // we'll be modifying options\n\n  if (typeof options.password !== 'string')\n    throw new Error(\"options.password must be a string\");\n  if (!options.password) {\n    return reportError(new Meteor.Error(400, \"Password may not be empty\"), callback);\n  }\n\n  // Replace password with the hashed password.\n  options.password = Accounts._hashPassword(options.password);\n\n  Accounts.callLoginMethod({\n    methodName: 'createUser',\n    methodArguments: [options],\n    userCallback: callback\n  });\n};\n\n// Change password. Must be logged in.\n//\n// @param oldPassword {String|null} By default servers no longer allow\n//   changing password without the old password, but they could so we\n//   support passing no password to the server and letting it decide.\n// @param newPassword {String}\n// @param callback {Function(error|undefined)}\n\n/**\n * @summary Change the current user's password. Must be logged in.\n * @locus Client\n * @param {String} oldPassword The user's current password. This is __not__ sent in plain text over the wire.\n * @param {String} newPassword A new password for the user. This is __not__ sent in plain text over the wire.\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n * @importFromPackage accounts-base\n */\nAccounts.changePassword = (oldPassword, newPassword, callback) => {\n  if (!Meteor.user()) {\n    return reportError(new Error(\"Must be logged in to change password.\"), callback);\n  }\n\n  if (!newPassword instanceof String) {\n    return reportError(new Meteor.Error(400, \"Password must be a string\"), callback);\n  }\n\n  if (!newPassword) {\n    return reportError(new Meteor.Error(400, \"Password may not be empty\"), callback);\n  }\n\n  Accounts.connection.apply(\n    'changePassword',\n    [oldPassword ? Accounts._hashPassword(oldPassword) : null,\n     Accounts._hashPassword(newPassword)],\n    (error, result) => {\n    if (error || !result) {\n        // A normal error, not an error telling us to upgrade to bcrypt\n        reportError(\n          error || new Error(\"No result from changePassword.\"), callback);\n      } else {\n        callback && callback();\n      }\n    }\n  );\n};\n\n// Sends an email to a user with a link that can be used to reset\n// their password\n//\n// @param options {Object}\n//   - email: (email)\n// @param callback (optional) {Function(error|undefined)}\n\n/**\n * @summary Request a forgot password email.\n * @locus Client\n * @param {Object} options\n * @param {String} options.email The email address to send a password reset link.\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n * @importFromPackage accounts-base\n */\nAccounts.forgotPassword = (options, callback) => {\n  if (!options.email) {\n    return reportError(new Meteor.Error(400, \"Must pass options.email\"), callback);\n  }\n\n  if (callback) {\n    Accounts.connection.call(\"forgotPassword\", options, callback);\n  } else {\n    Accounts.connection.call(\"forgotPassword\", options);\n  }\n};\n\n// Resets a password based on a token originally created by\n// Accounts.forgotPassword, and then logs in the matching user.\n//\n// @param token {String}\n// @param newPassword {String}\n// @param callback (optional) {Function(error|undefined)}\n\n/**\n * @summary Reset the password for a user using a token received in email. Logs the user in afterwards.\n * @locus Client\n * @param {String} token The token retrieved from the reset password URL.\n * @param {String} newPassword A new password for the user. This is __not__ sent in plain text over the wire.\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n * @importFromPackage accounts-base\n */\nAccounts.resetPassword = (token, newPassword, callback) => {\n  if (!token instanceof String) {\n    return reportError(new Meteor.Error(400, \"Token must be a string\"), callback);\n  }\n\n  if (!newPassword instanceof String) {\n    return reportError(new Meteor.Error(400, \"Password must be a string\"), callback);\n  }\n\n  if (!newPassword) {\n    return reportError(new Meteor.Error(400, \"Password may not be empty\"), callback);\n  }\n\n  Accounts.callLoginMethod({\n    methodName: 'resetPassword',\n    methodArguments: [token, Accounts._hashPassword(newPassword)],\n    userCallback: callback});\n};\n\n// Verifies a user's email address based on a token originally\n// created by Accounts.sendVerificationEmail\n//\n// @param token {String}\n// @param callback (optional) {Function(error|undefined)}\n\n/**\n * @summary Marks the user's email address as verified. Logs the user in afterwards.\n * @locus Client\n * @param {String} token The token retrieved from the verification URL.\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n * @importFromPackage accounts-base\n */\nAccounts.verifyEmail = (token, callback) => {\n  if (!token) {\n    return reportError(new Meteor.Error(400, \"Need to pass token\"), callback);\n  }\n\n  Accounts.callLoginMethod({\n    methodName: 'verifyEmail',\n    methodArguments: [token],\n    userCallback: callback});\n};\n"]},"sourceType":"module","externalDependencies":{},"hash":"43c89af1f8257c9b493e91bbe1437c5f5f914517"}
