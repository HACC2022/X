{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"C:\\Users\\zianz\\OneDrive\\Documents\\GitHub\\X\\app\\packages\\accounts-base\\accounts_server.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.windows.x86_64"},"sourceFileName":"packages/accounts-base/accounts_server.js","filename":"C:\\Users\\zianz\\OneDrive\\Documents\\GitHub\\X\\app\\packages\\accounts-base\\accounts_server.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"C:\\Users\\zianz\\OneDrive\\Documents\\GitHub\\X\\app","root":"C:\\Users\\zianz\\OneDrive\\Documents\\GitHub\\X\\app","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"C:\\Users\\zianz\\OneDrive\\Documents\\GitHub\\X\\app\\packages\\accounts-base\\accounts_server.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/accounts-base/accounts_server.js"}},"code":"const _excluded = [\"token\"];\n\nlet _objectWithoutProperties;\n\nmodule.link(\"@babel/runtime/helpers/objectWithoutProperties\", {\n  default(v) {\n    _objectWithoutProperties = v;\n  }\n\n}, 0);\n\nlet _objectSpread;\n\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n\n}, 1);\nmodule.export({\n  AccountsServer: () => AccountsServer\n});\nlet crypto;\nmodule.link(\"crypto\", {\n  default(v) {\n    crypto = v;\n  }\n\n}, 0);\nlet AccountsCommon, EXPIRE_TOKENS_INTERVAL_MS;\nmodule.link(\"./accounts_common.js\", {\n  AccountsCommon(v) {\n    AccountsCommon = v;\n  },\n\n  EXPIRE_TOKENS_INTERVAL_MS(v) {\n    EXPIRE_TOKENS_INTERVAL_MS = v;\n  }\n\n}, 1);\nlet URL;\nmodule.link(\"meteor/url\", {\n  URL(v) {\n    URL = v;\n  }\n\n}, 2);\nconst hasOwn = Object.prototype.hasOwnProperty; // XXX maybe this belongs in the check package\n\nconst NonEmptyString = Match.Where(x => {\n  check(x, String);\n  return x.length > 0;\n});\n/**\n * @summary Constructor for the `Accounts` namespace on the server.\n * @locus Server\n * @class AccountsServer\n * @extends AccountsCommon\n * @instancename accountsServer\n * @param {Object} server A server object such as `Meteor.server`.\n */\n\nclass AccountsServer extends AccountsCommon {\n  // Note that this constructor is less likely to be instantiated multiple\n  // times than the `AccountsClient` constructor, because a single server\n  // can provide only one set of methods.\n  constructor(server) {\n    var _this;\n\n    super();\n    _this = this;\n\n    this.onCreateLoginToken = function (func) {\n      if (this._onCreateLoginTokenHook) {\n        throw new Error('Can only call onCreateLoginToken once');\n      }\n\n      this._onCreateLoginTokenHook = func;\n    };\n\n    this._selectorForFastCaseInsensitiveLookup = (fieldName, string) => {\n      // Performance seems to improve up to 4 prefix characters\n      const prefix = string.substring(0, Math.min(string.length, 4));\n      const orClause = generateCasePermutationsForString(prefix).map(prefixPermutation => {\n        const selector = {};\n        selector[fieldName] = new RegExp(\"^\".concat(Meteor._escapeRegExp(prefixPermutation)));\n        return selector;\n      });\n      const caseInsensitiveClause = {};\n      caseInsensitiveClause[fieldName] = new RegExp(\"^\".concat(Meteor._escapeRegExp(string), \"$\"), 'i');\n      return {\n        $and: [{\n          $or: orClause\n        }, caseInsensitiveClause]\n      };\n    };\n\n    this._findUserByQuery = (query, options) => {\n      let user = null;\n\n      if (query.id) {\n        // default field selector is added within getUserById()\n        user = Meteor.users.findOne(query.id, this._addDefaultFieldSelector(options));\n      } else {\n        options = this._addDefaultFieldSelector(options);\n        let fieldName;\n        let fieldValue;\n\n        if (query.username) {\n          fieldName = 'username';\n          fieldValue = query.username;\n        } else if (query.email) {\n          fieldName = 'emails.address';\n          fieldValue = query.email;\n        } else {\n          throw new Error(\"shouldn't happen (validation missed something)\");\n        }\n\n        let selector = {};\n        selector[fieldName] = fieldValue;\n        user = Meteor.users.findOne(selector, options); // If user is not found, try a case insensitive lookup\n\n        if (!user) {\n          selector = this._selectorForFastCaseInsensitiveLookup(fieldName, fieldValue);\n          const candidateUsers = Meteor.users.find(selector, options).fetch(); // No match if multiple candidates are found\n\n          if (candidateUsers.length === 1) {\n            user = candidateUsers[0];\n          }\n        }\n      }\n\n      return user;\n    };\n\n    this._handleError = function (msg) {\n      let throwError = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      let errorCode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 403;\n      const error = new Meteor.Error(errorCode, _this._options.ambiguousErrorMessages ? \"Something went wrong. Please check your credentials.\" : msg);\n\n      if (throwError) {\n        throw error;\n      }\n\n      return error;\n    };\n\n    this._userQueryValidator = Match.Where(user => {\n      check(user, {\n        id: Match.Optional(NonEmptyString),\n        username: Match.Optional(NonEmptyString),\n        email: Match.Optional(NonEmptyString)\n      });\n      if (Object.keys(user).length !== 1) throw new Match.Error(\"User property must have exactly one field\");\n      return true;\n    });\n    this._server = server || Meteor.server; // Set up the server's methods, as if by calling Meteor.methods.\n\n    this._initServerMethods();\n\n    this._initAccountDataHooks(); // If autopublish is on, publish these user fields. Login service\n    // packages (eg accounts-google) add to these by calling\n    // addAutopublishFields.  Notably, this isn't implemented with multiple\n    // publishes since DDP only merges only across top-level fields, not\n    // subfields (such as 'services.facebook.accessToken')\n\n\n    this._autopublishFields = {\n      loggedInUser: ['profile', 'username', 'emails'],\n      otherUsers: ['profile', 'username']\n    }; // use object to keep the reference when used in functions\n    // where _defaultPublishFields is destructured into lexical scope\n    // for publish callbacks that need `this`\n\n    this._defaultPublishFields = {\n      projection: {\n        profile: 1,\n        username: 1,\n        emails: 1\n      }\n    };\n\n    this._initServerPublications(); // connectionId -> {connection, loginToken}\n\n\n    this._accountData = {}; // connection id -> observe handle for the login token that this connection is\n    // currently associated with, or a number. The number indicates that we are in\n    // the process of setting up the observe (using a number instead of a single\n    // sentinel allows multiple attempts to set up the observe to identify which\n    // one was theirs).\n\n    this._userObservesForConnections = {};\n    this._nextUserObserveNumber = 1; // for the number described above.\n    // list of all registered handlers.\n\n    this._loginHandlers = [];\n    setupUsersCollection(this.users);\n    setupDefaultLoginHandlers(this);\n    setExpireTokensInterval(this);\n    this._validateLoginHook = new Hook({\n      bindEnvironment: false\n    });\n    this._validateNewUserHooks = [defaultValidateNewUserHook.bind(this)];\n\n    this._deleteSavedTokensForAllUsersOnStartup();\n\n    this._skipCaseInsensitiveChecksForTest = {};\n    this.urls = {\n      resetPassword: (token, extraParams) => this.buildEmailUrl(\"#/reset-password/\".concat(token), extraParams),\n      verifyEmail: (token, extraParams) => this.buildEmailUrl(\"#/verify-email/\".concat(token), extraParams),\n      loginToken: (selector, token, extraParams) => this.buildEmailUrl(\"/?loginToken=\".concat(token, \"&selector=\").concat(selector), extraParams),\n      enrollAccount: (token, extraParams) => this.buildEmailUrl(\"#/enroll-account/\".concat(token), extraParams)\n    };\n    this.addDefaultRateLimit();\n\n    this.buildEmailUrl = function (path) {\n      let extraParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      const url = new URL(Meteor.absoluteUrl(path));\n      const params = Object.entries(extraParams);\n\n      if (params.length > 0) {\n        // Add additional parameters to the url\n        for (const [key, value] of params) {\n          url.searchParams.append(key, value);\n        }\n      }\n\n      return url.toString();\n    };\n  } ///\n  /// CURRENT USER\n  ///\n  // @override of \"abstract\" non-implementation in accounts_common.js\n\n\n  userId() {\n    // This function only works if called inside a method or a pubication.\n    // Using any of the information from Meteor.user() in a method or\n    // publish function will always use the value from when the function first\n    // runs. This is likely not what the user expects. The way to make this work\n    // in a method or publish function is to do Meteor.find(this.userId).observe\n    // and recompute when the user record changes.\n    const currentInvocation = DDP._CurrentMethodInvocation.get() || DDP._CurrentPublicationInvocation.get();\n\n    if (!currentInvocation) throw new Error(\"Meteor.userId can only be invoked in method calls or publications.\");\n    return currentInvocation.userId;\n  } ///\n  /// LOGIN HOOKS\n  ///\n\n  /**\n   * @summary Validate login attempts.\n   * @locus Server\n   * @param {Function} func Called whenever a login is attempted (either successful or unsuccessful).  A login can be aborted by returning a falsy value or throwing an exception.\n   */\n\n\n  validateLoginAttempt(func) {\n    // Exceptions inside the hook callback are passed up to us.\n    return this._validateLoginHook.register(func);\n  }\n  /**\n   * @summary Set restrictions on new user creation.\n   * @locus Server\n   * @param {Function} func Called whenever a new user is created. Takes the new user object, and returns true to allow the creation or false to abort.\n   */\n\n\n  validateNewUser(func) {\n    this._validateNewUserHooks.push(func);\n  }\n  /**\n   * @summary Validate login from external service\n   * @locus Server\n   * @param {Function} func Called whenever login/user creation from external service is attempted. Login or user creation based on this login can be aborted by passing a falsy value or throwing an exception.\n   */\n\n\n  beforeExternalLogin(func) {\n    if (this._beforeExternalLoginHook) {\n      throw new Error(\"Can only call beforeExternalLogin once\");\n    }\n\n    this._beforeExternalLoginHook = func;\n  } ///\n  /// CREATE USER HOOKS\n  ///\n\n  /**\n   * @summary Customize login token creation.\n   * @locus Server\n   * @param {Function} func Called whenever a new token is created.\n   * Return the sequence and the user object. Return true to keep sending the default email, or false to override the behavior.\n   */\n\n\n  /**\n   * @summary Customize new user creation.\n   * @locus Server\n   * @param {Function} func Called whenever a new user is created. Return the new user object, or throw an `Error` to abort the creation.\n   */\n  onCreateUser(func) {\n    if (this._onCreateUserHook) {\n      throw new Error(\"Can only call onCreateUser once\");\n    }\n\n    this._onCreateUserHook = func;\n  }\n  /**\n   * @summary Customize oauth user profile updates\n   * @locus Server\n   * @param {Function} func Called whenever a user is logged in via oauth. Return the profile object to be merged, or throw an `Error` to abort the creation.\n   */\n\n\n  onExternalLogin(func) {\n    if (this._onExternalLoginHook) {\n      throw new Error(\"Can only call onExternalLogin once\");\n    }\n\n    this._onExternalLoginHook = func;\n  }\n  /**\n   * @summary Customize user selection on external logins\n   * @locus Server\n   * @param {Function} func Called whenever a user is logged in via oauth and a\n   * user is not found with the service id. Return the user or undefined.\n   */\n\n\n  setAdditionalFindUserOnExternalLogin(func) {\n    if (this._additionalFindUserOnExternalLogin) {\n      throw new Error(\"Can only call setAdditionalFindUserOnExternalLogin once\");\n    }\n\n    this._additionalFindUserOnExternalLogin = func;\n  }\n\n  _validateLogin(connection, attempt) {\n    this._validateLoginHook.forEach(callback => {\n      let ret;\n\n      try {\n        ret = callback(cloneAttemptWithConnection(connection, attempt));\n      } catch (e) {\n        attempt.allowed = false; // XXX this means the last thrown error overrides previous error\n        // messages. Maybe this is surprising to users and we should make\n        // overriding errors more explicit. (see\n        // https://github.com/meteor/meteor/issues/1960)\n\n        attempt.error = e;\n        return true;\n      }\n\n      if (!ret) {\n        attempt.allowed = false; // don't override a specific error provided by a previous\n        // validator or the initial attempt (eg \"incorrect password\").\n\n        if (!attempt.error) attempt.error = new Meteor.Error(403, \"Login forbidden\");\n      }\n\n      return true;\n    });\n  }\n\n  _successfulLogin(connection, attempt) {\n    this._onLoginHook.each(callback => {\n      callback(cloneAttemptWithConnection(connection, attempt));\n      return true;\n    });\n  }\n\n  _failedLogin(connection, attempt) {\n    this._onLoginFailureHook.each(callback => {\n      callback(cloneAttemptWithConnection(connection, attempt));\n      return true;\n    });\n  }\n\n  _successfulLogout(connection, userId) {\n    // don't fetch the user object unless there are some callbacks registered\n    let user;\n\n    this._onLogoutHook.each(callback => {\n      if (!user && userId) user = this.users.findOne(userId, {\n        fields: this._options.defaultFieldSelector\n      });\n      callback({\n        user,\n        connection\n      });\n      return true;\n    });\n  }\n\n  ///\n  /// LOGIN METHODS\n  ///\n  // Login methods return to the client an object containing these\n  // fields when the user was logged in successfully:\n  //\n  //   id: userId\n  //   token: *\n  //   tokenExpires: *\n  //\n  // tokenExpires is optional and intends to provide a hint to the\n  // client as to when the token will expire. If not provided, the\n  // client will call Accounts._tokenExpiration, passing it the date\n  // that it received the token.\n  //\n  // The login method will throw an error back to the client if the user\n  // failed to log in.\n  //\n  //\n  // Login handlers and service specific login methods such as\n  // `createUser` internally return a `result` object containing these\n  // fields:\n  //\n  //   type:\n  //     optional string; the service name, overrides the handler\n  //     default if present.\n  //\n  //   error:\n  //     exception; if the user is not allowed to login, the reason why.\n  //\n  //   userId:\n  //     string; the user id of the user attempting to login (if\n  //     known), required for an allowed login.\n  //\n  //   options:\n  //     optional object merged into the result returned by the login\n  //     method; used by HAMK from SRP.\n  //\n  //   stampedLoginToken:\n  //     optional object with `token` and `when` indicating the login\n  //     token is already present in the database, returned by the\n  //     \"resume\" login handler.\n  //\n  // For convenience, login methods can also throw an exception, which\n  // is converted into an {error} result.  However, if the id of the\n  // user attempting the login is known, a {userId, error} result should\n  // be returned instead since the user id is not captured when an\n  // exception is thrown.\n  //\n  // This internal `result` object is automatically converted into the\n  // public {id, token, tokenExpires} object returned to the client.\n  // Try a login method, converting thrown exceptions into an {error}\n  // result.  The `type` argument is a default, inserted into the result\n  // object if not explicitly returned.\n  //\n  // Log in a user on a connection.\n  //\n  // We use the method invocation to set the user id on the connection,\n  // not the connection object directly. setUserId is tied to methods to\n  // enforce clear ordering of method application (using wait methods on\n  // the client, and a no setUserId after unblock restriction on the\n  // server)\n  //\n  // The `stampedLoginToken` parameter is optional.  When present, it\n  // indicates that the login token has already been inserted into the\n  // database and doesn't need to be inserted again.  (It's used by the\n  // \"resume\" login handler).\n  _loginUser(methodInvocation, userId, stampedLoginToken) {\n    if (!stampedLoginToken) {\n      stampedLoginToken = this._generateStampedLoginToken();\n\n      this._insertLoginToken(userId, stampedLoginToken);\n    } // This order (and the avoidance of yields) is important to make\n    // sure that when publish functions are rerun, they see a\n    // consistent view of the world: the userId is set and matches\n    // the login token on the connection (not that there is\n    // currently a public API for reading the login token on a\n    // connection).\n\n\n    Meteor._noYieldsAllowed(() => this._setLoginToken(userId, methodInvocation.connection, this._hashLoginToken(stampedLoginToken.token)));\n\n    methodInvocation.setUserId(userId);\n    return {\n      id: userId,\n      token: stampedLoginToken.token,\n      tokenExpires: this._tokenExpiration(stampedLoginToken.when)\n    };\n  }\n\n  // After a login method has completed, call the login hooks.  Note\n  // that `attemptLogin` is called for *all* login attempts, even ones\n  // which aren't successful (such as an invalid password, etc).\n  //\n  // If the login is allowed and isn't aborted by a validate login hook\n  // callback, log in the user.\n  //\n  _attemptLogin(methodInvocation, methodName, methodArgs, result) {\n    if (!result) throw new Error(\"result is required\"); // XXX A programming error in a login handler can lead to this occurring, and\n    // then we don't call onLogin or onLoginFailure callbacks. Should\n    // tryLoginMethod catch this case and turn it into an error?\n\n    if (!result.userId && !result.error) throw new Error(\"A login method must specify a userId or an error\");\n    let user;\n    if (result.userId) user = this.users.findOne(result.userId, {\n      fields: this._options.defaultFieldSelector\n    });\n    const attempt = {\n      type: result.type || \"unknown\",\n      allowed: !!(result.userId && !result.error),\n      methodName: methodName,\n      methodArguments: Array.from(methodArgs)\n    };\n\n    if (result.error) {\n      attempt.error = result.error;\n    }\n\n    if (user) {\n      attempt.user = user;\n    } // _validateLogin may mutate `attempt` by adding an error and changing allowed\n    // to false, but that's the only change it can make (and the user's callbacks\n    // only get a clone of `attempt`).\n\n\n    this._validateLogin(methodInvocation.connection, attempt);\n\n    if (attempt.allowed) {\n      const ret = _objectSpread(_objectSpread({}, this._loginUser(methodInvocation, result.userId, result.stampedLoginToken)), result.options);\n\n      ret.type = attempt.type;\n\n      this._successfulLogin(methodInvocation.connection, attempt);\n\n      return ret;\n    } else {\n      this._failedLogin(methodInvocation.connection, attempt);\n\n      throw attempt.error;\n    }\n  }\n\n  // All service specific login methods should go through this function.\n  // Ensure that thrown exceptions are caught and that login hook\n  // callbacks are still called.\n  //\n  _loginMethod(methodInvocation, methodName, methodArgs, type, fn) {\n    return this._attemptLogin(methodInvocation, methodName, methodArgs, tryLoginMethod(type, fn));\n  }\n\n  // Report a login attempt failed outside the context of a normal login\n  // method. This is for use in the case where there is a multi-step login\n  // procedure (eg SRP based password login). If a method early in the\n  // chain fails, it should call this function to report a failure. There\n  // is no corresponding method for a successful login; methods that can\n  // succeed at logging a user in should always be actual login methods\n  // (using either Accounts._loginMethod or Accounts.registerLoginHandler).\n  _reportLoginFailure(methodInvocation, methodName, methodArgs, result) {\n    const attempt = {\n      type: result.type || \"unknown\",\n      allowed: false,\n      error: result.error,\n      methodName: methodName,\n      methodArguments: Array.from(methodArgs)\n    };\n\n    if (result.userId) {\n      attempt.user = this.users.findOne(result.userId, {\n        fields: this._options.defaultFieldSelector\n      });\n    }\n\n    this._validateLogin(methodInvocation.connection, attempt);\n\n    this._failedLogin(methodInvocation.connection, attempt); // _validateLogin may mutate attempt to set a new error message. Return\n    // the modified version.\n\n\n    return attempt;\n  }\n\n  ///\n  /// LOGIN HANDLERS\n  ///\n  // The main entry point for auth packages to hook in to login.\n  //\n  // A login handler is a login method which can return `undefined` to\n  // indicate that the login request is not handled by this handler.\n  //\n  // @param name {String} Optional.  The service name, used by default\n  // if a specific service name isn't returned in the result.\n  //\n  // @param handler {Function} A function that receives an options object\n  // (as passed as an argument to the `login` method) and returns one of:\n  // - `undefined`, meaning don't handle;\n  // - a login method result object\n  registerLoginHandler(name, handler) {\n    if (!handler) {\n      handler = name;\n      name = null;\n    }\n\n    this._loginHandlers.push({\n      name: name,\n      handler: handler\n    });\n  }\n\n  // Checks a user's credentials against all the registered login\n  // handlers, and returns a login token if the credentials are valid. It\n  // is like the login method, except that it doesn't set the logged-in\n  // user on the connection. Throws a Meteor.Error if logging in fails,\n  // including the case where none of the login handlers handled the login\n  // request. Otherwise, returns {id: userId, token: *, tokenExpires: *}.\n  //\n  // For example, if you want to login with a plaintext password, `options` could be\n  //   { user: { username: <username> }, password: <password> }, or\n  //   { user: { email: <email> }, password: <password> }.\n  // Try all of the registered login handlers until one of them doesn't\n  // return `undefined`, meaning it handled this call to `login`. Return\n  // that return value.\n  _runLoginHandlers(methodInvocation, options) {\n    for (let handler of this._loginHandlers) {\n      const result = tryLoginMethod(handler.name, () => handler.handler.call(methodInvocation, options));\n\n      if (result) {\n        return result;\n      }\n\n      if (result !== undefined) {\n        throw new Meteor.Error(400, \"A login handler should return a result or undefined\");\n      }\n    }\n\n    return {\n      type: null,\n      error: new Meteor.Error(400, \"Unrecognized options for login request\")\n    };\n  }\n\n  // Deletes the given loginToken from the database.\n  //\n  // For new-style hashed token, this will cause all connections\n  // associated with the token to be closed.\n  //\n  // Any connections associated with old-style unhashed tokens will be\n  // in the process of becoming associated with hashed tokens and then\n  // they'll get closed.\n  destroyToken(userId, loginToken) {\n    this.users.update(userId, {\n      $pull: {\n        \"services.resume.loginTokens\": {\n          $or: [{\n            hashedToken: loginToken\n          }, {\n            token: loginToken\n          }]\n        }\n      }\n    });\n  }\n\n  _initServerMethods() {\n    // The methods created in this function need to be created here so that\n    // this variable is available in their scope.\n    const accounts = this; // This object will be populated with methods and then passed to\n    // accounts._server.methods further below.\n\n    const methods = {}; // @returns {Object|null}\n    //   If successful, returns {token: reconnectToken, id: userId}\n    //   If unsuccessful (for example, if the user closed the oauth login popup),\n    //     throws an error describing the reason\n\n    methods.login = function (options) {\n      // Login handlers should really also check whatever field they look at in\n      // options, but we don't enforce it.\n      check(options, Object);\n\n      const result = accounts._runLoginHandlers(this, options);\n\n      return accounts._attemptLogin(this, \"login\", arguments, result);\n    };\n\n    methods.logout = function () {\n      const token = accounts._getLoginToken(this.connection.id);\n\n      accounts._setLoginToken(this.userId, this.connection, null);\n\n      if (token && this.userId) {\n        accounts.destroyToken(this.userId, token);\n      }\n\n      accounts._successfulLogout(this.connection, this.userId);\n\n      this.setUserId(null);\n    }; // Generates a new login token with the same expiration as the\n    // connection's current token and saves it to the database. Associates\n    // the connection with this new token and returns it. Throws an error\n    // if called on a connection that isn't logged in.\n    //\n    // @returns Object\n    //   If successful, returns { token: <new token>, id: <user id>,\n    //   tokenExpires: <expiration date> }.\n\n\n    methods.getNewToken = function () {\n      const user = accounts.users.findOne(this.userId, {\n        fields: {\n          \"services.resume.loginTokens\": 1\n        }\n      });\n\n      if (!this.userId || !user) {\n        throw new Meteor.Error(\"You are not logged in.\");\n      } // Be careful not to generate a new token that has a later\n      // expiration than the curren token. Otherwise, a bad guy with a\n      // stolen token could use this method to stop his stolen token from\n      // ever expiring.\n\n\n      const currentHashedToken = accounts._getLoginToken(this.connection.id);\n\n      const currentStampedToken = user.services.resume.loginTokens.find(stampedToken => stampedToken.hashedToken === currentHashedToken);\n\n      if (!currentStampedToken) {\n        // safety belt: this should never happen\n        throw new Meteor.Error(\"Invalid login token\");\n      }\n\n      const newStampedToken = accounts._generateStampedLoginToken();\n\n      newStampedToken.when = currentStampedToken.when;\n\n      accounts._insertLoginToken(this.userId, newStampedToken);\n\n      return accounts._loginUser(this, this.userId, newStampedToken);\n    }; // Removes all tokens except the token associated with the current\n    // connection. Throws an error if the connection is not logged\n    // in. Returns nothing on success.\n\n\n    methods.removeOtherTokens = function () {\n      if (!this.userId) {\n        throw new Meteor.Error(\"You are not logged in.\");\n      }\n\n      const currentToken = accounts._getLoginToken(this.connection.id);\n\n      accounts.users.update(this.userId, {\n        $pull: {\n          \"services.resume.loginTokens\": {\n            hashedToken: {\n              $ne: currentToken\n            }\n          }\n        }\n      });\n    }; // Allow a one-time configuration for a login service. Modifications\n    // to this collection are also allowed in insecure mode.\n\n\n    methods.configureLoginService = options => {\n      check(options, Match.ObjectIncluding({\n        service: String\n      })); // Don't let random users configure a service we haven't added yet (so\n      // that when we do later add it, it's set up with their configuration\n      // instead of ours).\n      // XXX if service configuration is oauth-specific then this code should\n      //     be in accounts-oauth; if it's not then the registry should be\n      //     in this package\n\n      if (!(accounts.oauth && accounts.oauth.serviceNames().includes(options.service))) {\n        throw new Meteor.Error(403, \"Service unknown\");\n      }\n\n      const {\n        ServiceConfiguration\n      } = Package['service-configuration'];\n      if (ServiceConfiguration.configurations.findOne({\n        service: options.service\n      })) throw new Meteor.Error(403, \"Service \".concat(options.service, \" already configured\"));\n      if (hasOwn.call(options, 'secret') && usingOAuthEncryption()) options.secret = OAuthEncryption.seal(options.secret);\n      ServiceConfiguration.configurations.insert(options);\n    };\n\n    accounts._server.methods(methods);\n  }\n\n  _initAccountDataHooks() {\n    this._server.onConnection(connection => {\n      this._accountData[connection.id] = {\n        connection: connection\n      };\n      connection.onClose(() => {\n        this._removeTokenFromConnection(connection.id);\n\n        delete this._accountData[connection.id];\n      });\n    });\n  }\n\n  _initServerPublications() {\n    // Bring into lexical scope for publish callbacks that need `this`\n    const {\n      users,\n      _autopublishFields,\n      _defaultPublishFields\n    } = this; // Publish all login service configuration fields other than secret.\n\n    this._server.publish(\"meteor.loginServiceConfiguration\", () => {\n      const {\n        ServiceConfiguration\n      } = Package['service-configuration'];\n      return ServiceConfiguration.configurations.find({}, {\n        fields: {\n          secret: 0\n        }\n      });\n    }, {\n      is_auto: true\n    }); // not technically autopublish, but stops the warning.\n    // Use Meteor.startup to give other packages a chance to call\n    // setDefaultPublishFields.\n\n\n    Meteor.startup(() => {\n      // Merge custom fields selector and default publish fields so that the client\n      // gets all the necessary fields to run properly\n      const customFields = this._addDefaultFieldSelector().fields || {};\n      const keys = Object.keys(customFields); // If the custom fields are negative, then ignore them and only send the necessary fields\n\n      const fields = keys.length > 0 && customFields[keys[0]] ? _objectSpread(_objectSpread({}, this._addDefaultFieldSelector().fields), _defaultPublishFields.projection) : _defaultPublishFields.projection; // Publish the current user's record to the client.\n\n      this._server.publish(null, function () {\n        if (this.userId) {\n          return users.find({\n            _id: this.userId\n          }, {\n            fields\n          });\n        } else {\n          return null;\n        }\n      },\n      /*suppress autopublish warning*/\n      {\n        is_auto: true\n      });\n    }); // Use Meteor.startup to give other packages a chance to call\n    // addAutopublishFields.\n\n    Package.autopublish && Meteor.startup(() => {\n      // ['profile', 'username'] -> {profile: 1, username: 1}\n      const toFieldSelector = fields => fields.reduce((prev, field) => _objectSpread(_objectSpread({}, prev), {}, {\n        [field]: 1\n      }), {});\n\n      this._server.publish(null, function () {\n        if (this.userId) {\n          return users.find({\n            _id: this.userId\n          }, {\n            fields: toFieldSelector(_autopublishFields.loggedInUser)\n          });\n        } else {\n          return null;\n        }\n      },\n      /*suppress autopublish warning*/\n      {\n        is_auto: true\n      }); // XXX this publish is neither dedup-able nor is it optimized by our special\n      // treatment of queries on a specific _id. Therefore this will have O(n^2)\n      // run-time performance every time a user document is changed (eg someone\n      // logging in). If this is a problem, we can instead write a manual publish\n      // function which filters out fields based on 'this.userId'.\n\n\n      this._server.publish(null, function () {\n        const selector = this.userId ? {\n          _id: {\n            $ne: this.userId\n          }\n        } : {};\n        return users.find(selector, {\n          fields: toFieldSelector(_autopublishFields.otherUsers)\n        });\n      },\n      /*suppress autopublish warning*/\n      {\n        is_auto: true\n      });\n    });\n  }\n\n  // Add to the list of fields or subfields to be automatically\n  // published if autopublish is on. Must be called from top-level\n  // code (ie, before Meteor.startup hooks run).\n  //\n  // @param opts {Object} with:\n  //   - forLoggedInUser {Array} Array of fields published to the logged-in user\n  //   - forOtherUsers {Array} Array of fields published to users that aren't logged in\n  addAutopublishFields(opts) {\n    this._autopublishFields.loggedInUser.push.apply(this._autopublishFields.loggedInUser, opts.forLoggedInUser);\n\n    this._autopublishFields.otherUsers.push.apply(this._autopublishFields.otherUsers, opts.forOtherUsers);\n  }\n\n  // Replaces the fields to be automatically\n  // published when the user logs in\n  //\n  // @param {MongoFieldSpecifier} fields Dictionary of fields to return or exclude.\n  setDefaultPublishFields(fields) {\n    this._defaultPublishFields.projection = fields;\n  }\n\n  ///\n  /// ACCOUNT DATA\n  ///\n  // HACK: This is used by 'meteor-accounts' to get the loginToken for a\n  // connection. Maybe there should be a public way to do that.\n  _getAccountData(connectionId, field) {\n    const data = this._accountData[connectionId];\n    return data && data[field];\n  }\n\n  _setAccountData(connectionId, field, value) {\n    const data = this._accountData[connectionId]; // safety belt. shouldn't happen. accountData is set in onConnection,\n    // we don't have a connectionId until it is set.\n\n    if (!data) return;\n    if (value === undefined) delete data[field];else data[field] = value;\n  }\n\n  ///\n  /// RECONNECT TOKENS\n  ///\n  /// support reconnecting using a meteor login token\n  _hashLoginToken(loginToken) {\n    const hash = crypto.createHash('sha256');\n    hash.update(loginToken);\n    return hash.digest('base64');\n  }\n\n  // {token, when} => {hashedToken, when}\n  _hashStampedToken(stampedToken) {\n    const {\n      token\n    } = stampedToken,\n          hashedStampedToken = _objectWithoutProperties(stampedToken, _excluded);\n\n    return _objectSpread(_objectSpread({}, hashedStampedToken), {}, {\n      hashedToken: this._hashLoginToken(token)\n    });\n  }\n\n  // Using $addToSet avoids getting an index error if another client\n  // logging in simultaneously has already inserted the new hashed\n  // token.\n  _insertHashedLoginToken(userId, hashedToken, query) {\n    query = query ? _objectSpread({}, query) : {};\n    query._id = userId;\n    this.users.update(query, {\n      $addToSet: {\n        \"services.resume.loginTokens\": hashedToken\n      }\n    });\n  }\n\n  // Exported for tests.\n  _insertLoginToken(userId, stampedToken, query) {\n    this._insertHashedLoginToken(userId, this._hashStampedToken(stampedToken), query);\n  }\n\n  _clearAllLoginTokens(userId) {\n    this.users.update(userId, {\n      $set: {\n        'services.resume.loginTokens': []\n      }\n    });\n  }\n\n  // test hook\n  _getUserObserve(connectionId) {\n    return this._userObservesForConnections[connectionId];\n  }\n\n  // Clean up this connection's association with the token: that is, stop\n  // the observe that we started when we associated the connection with\n  // this token.\n  _removeTokenFromConnection(connectionId) {\n    if (hasOwn.call(this._userObservesForConnections, connectionId)) {\n      const observe = this._userObservesForConnections[connectionId];\n\n      if (typeof observe === 'number') {\n        // We're in the process of setting up an observe for this connection. We\n        // can't clean up that observe yet, but if we delete the placeholder for\n        // this connection, then the observe will get cleaned up as soon as it has\n        // been set up.\n        delete this._userObservesForConnections[connectionId];\n      } else {\n        delete this._userObservesForConnections[connectionId];\n        observe.stop();\n      }\n    }\n  }\n\n  _getLoginToken(connectionId) {\n    return this._getAccountData(connectionId, 'loginToken');\n  }\n\n  // newToken is a hashed token.\n  _setLoginToken(userId, connection, newToken) {\n    this._removeTokenFromConnection(connection.id);\n\n    this._setAccountData(connection.id, 'loginToken', newToken);\n\n    if (newToken) {\n      // Set up an observe for this token. If the token goes away, we need\n      // to close the connection.  We defer the observe because there's\n      // no need for it to be on the critical path for login; we just need\n      // to ensure that the connection will get closed at some point if\n      // the token gets deleted.\n      //\n      // Initially, we set the observe for this connection to a number; this\n      // signifies to other code (which might run while we yield) that we are in\n      // the process of setting up an observe for this connection. Once the\n      // observe is ready to go, we replace the number with the real observe\n      // handle (unless the placeholder has been deleted or replaced by a\n      // different placehold number, signifying that the connection was closed\n      // already -- in this case we just clean up the observe that we started).\n      const myObserveNumber = ++this._nextUserObserveNumber;\n      this._userObservesForConnections[connection.id] = myObserveNumber;\n      Meteor.defer(() => {\n        // If something else happened on this connection in the meantime (it got\n        // closed, or another call to _setLoginToken happened), just do\n        // nothing. We don't need to start an observe for an old connection or old\n        // token.\n        if (this._userObservesForConnections[connection.id] !== myObserveNumber) {\n          return;\n        }\n\n        let foundMatchingUser; // Because we upgrade unhashed login tokens to hashed tokens at\n        // login time, sessions will only be logged in with a hashed\n        // token. Thus we only need to observe hashed tokens here.\n\n        const observe = this.users.find({\n          _id: userId,\n          'services.resume.loginTokens.hashedToken': newToken\n        }, {\n          fields: {\n            _id: 1\n          }\n        }).observeChanges({\n          added: () => {\n            foundMatchingUser = true;\n          },\n          removed: connection.close // The onClose callback for the connection takes care of\n          // cleaning up the observe handle and any other state we have\n          // lying around.\n\n        }, {\n          nonMutatingCallbacks: true\n        }); // If the user ran another login or logout command we were waiting for the\n        // defer or added to fire (ie, another call to _setLoginToken occurred),\n        // then we let the later one win (start an observe, etc) and just stop our\n        // observe now.\n        //\n        // Similarly, if the connection was already closed, then the onClose\n        // callback would have called _removeTokenFromConnection and there won't\n        // be an entry in _userObservesForConnections. We can stop the observe.\n\n        if (this._userObservesForConnections[connection.id] !== myObserveNumber) {\n          observe.stop();\n          return;\n        }\n\n        this._userObservesForConnections[connection.id] = observe;\n\n        if (!foundMatchingUser) {\n          // We've set up an observe on the user associated with `newToken`,\n          // so if the new token is removed from the database, we'll close\n          // the connection. But the token might have already been deleted\n          // before we set up the observe, which wouldn't have closed the\n          // connection because the observe wasn't running yet.\n          connection.close();\n        }\n      });\n    }\n  }\n\n  // (Also used by Meteor Accounts server and tests).\n  //\n  _generateStampedLoginToken() {\n    return {\n      token: Random.secret(),\n      when: new Date()\n    };\n  }\n\n  ///\n  /// TOKEN EXPIRATION\n  ///\n  // Deletes expired password reset tokens from the database.\n  //\n  // Exported for tests. Also, the arguments are only used by\n  // tests. oldestValidDate is simulate expiring tokens without waiting\n  // for them to actually expire. userId is used by tests to only expire\n  // tokens for the test user.\n  _expirePasswordResetTokens(oldestValidDate, userId) {\n    const tokenLifetimeMs = this._getPasswordResetTokenLifetimeMs(); // when calling from a test with extra arguments, you must specify both!\n\n\n    if (oldestValidDate && !userId || !oldestValidDate && userId) {\n      throw new Error(\"Bad test. Must specify both oldestValidDate and userId.\");\n    }\n\n    oldestValidDate = oldestValidDate || new Date(new Date() - tokenLifetimeMs);\n    const tokenFilter = {\n      $or: [{\n        \"services.password.reset.reason\": \"reset\"\n      }, {\n        \"services.password.reset.reason\": {\n          $exists: false\n        }\n      }]\n    };\n    expirePasswordToken(this, oldestValidDate, tokenFilter, userId);\n  } // Deletes expired password enroll tokens from the database.\n  //\n  // Exported for tests. Also, the arguments are only used by\n  // tests. oldestValidDate is simulate expiring tokens without waiting\n  // for them to actually expire. userId is used by tests to only expire\n  // tokens for the test user.\n\n\n  _expirePasswordEnrollTokens(oldestValidDate, userId) {\n    const tokenLifetimeMs = this._getPasswordEnrollTokenLifetimeMs(); // when calling from a test with extra arguments, you must specify both!\n\n\n    if (oldestValidDate && !userId || !oldestValidDate && userId) {\n      throw new Error(\"Bad test. Must specify both oldestValidDate and userId.\");\n    }\n\n    oldestValidDate = oldestValidDate || new Date(new Date() - tokenLifetimeMs);\n    const tokenFilter = {\n      \"services.password.enroll.reason\": \"enroll\"\n    };\n    expirePasswordToken(this, oldestValidDate, tokenFilter, userId);\n  } // Deletes expired tokens from the database and closes all open connections\n  // associated with these tokens.\n  //\n  // Exported for tests. Also, the arguments are only used by\n  // tests. oldestValidDate is simulate expiring tokens without waiting\n  // for them to actually expire. userId is used by tests to only expire\n  // tokens for the test user.\n\n\n  _expireTokens(oldestValidDate, userId) {\n    const tokenLifetimeMs = this._getTokenLifetimeMs(); // when calling from a test with extra arguments, you must specify both!\n\n\n    if (oldestValidDate && !userId || !oldestValidDate && userId) {\n      throw new Error(\"Bad test. Must specify both oldestValidDate and userId.\");\n    }\n\n    oldestValidDate = oldestValidDate || new Date(new Date() - tokenLifetimeMs);\n    const userFilter = userId ? {\n      _id: userId\n    } : {}; // Backwards compatible with older versions of meteor that stored login token\n    // timestamps as numbers.\n\n    this.users.update(_objectSpread(_objectSpread({}, userFilter), {}, {\n      $or: [{\n        \"services.resume.loginTokens.when\": {\n          $lt: oldestValidDate\n        }\n      }, {\n        \"services.resume.loginTokens.when\": {\n          $lt: +oldestValidDate\n        }\n      }]\n    }), {\n      $pull: {\n        \"services.resume.loginTokens\": {\n          $or: [{\n            when: {\n              $lt: oldestValidDate\n            }\n          }, {\n            when: {\n              $lt: +oldestValidDate\n            }\n          }]\n        }\n      }\n    }, {\n      multi: true\n    }); // The observe on Meteor.users will take care of closing connections for\n    // expired tokens.\n  }\n\n  // @override from accounts_common.js\n  config(options) {\n    // Call the overridden implementation of the method.\n    const superResult = AccountsCommon.prototype.config.apply(this, arguments); // If the user set loginExpirationInDays to null, then we need to clear the\n    // timer that periodically expires tokens.\n\n    if (hasOwn.call(this._options, 'loginExpirationInDays') && this._options.loginExpirationInDays === null && this.expireTokenInterval) {\n      Meteor.clearInterval(this.expireTokenInterval);\n      this.expireTokenInterval = null;\n    }\n\n    return superResult;\n  }\n\n  // Called by accounts-password\n  insertUserDoc(options, user) {\n    // - clone user document, to protect from modification\n    // - add createdAt timestamp\n    // - prepare an _id, so that you can modify other collections (eg\n    // create a first task for every new user)\n    //\n    // XXX If the onCreateUser or validateNewUser hooks fail, we might\n    // end up having modified some other collection\n    // inappropriately. The solution is probably to have onCreateUser\n    // accept two callbacks - one that gets called before inserting\n    // the user document (in which you can modify its contents), and\n    // one that gets called after (in which you should change other\n    // collections)\n    user = _objectSpread({\n      createdAt: new Date(),\n      _id: Random.id()\n    }, user);\n\n    if (user.services) {\n      Object.keys(user.services).forEach(service => pinEncryptedFieldsToUser(user.services[service], user._id));\n    }\n\n    let fullUser;\n\n    if (this._onCreateUserHook) {\n      fullUser = this._onCreateUserHook(options, user); // This is *not* part of the API. We need this because we can't isolate\n      // the global server environment between tests, meaning we can't test\n      // both having a create user hook set and not having one set.\n\n      if (fullUser === 'TEST DEFAULT HOOK') fullUser = defaultCreateUserHook(options, user);\n    } else {\n      fullUser = defaultCreateUserHook(options, user);\n    }\n\n    this._validateNewUserHooks.forEach(hook => {\n      if (!hook(fullUser)) throw new Meteor.Error(403, \"User validation failed\");\n    });\n\n    let userId;\n\n    try {\n      userId = this.users.insert(fullUser);\n    } catch (e) {\n      // XXX string parsing sucks, maybe\n      // https://jira.mongodb.org/browse/SERVER-3069 will get fixed one day\n      // https://jira.mongodb.org/browse/SERVER-4637\n      if (!e.errmsg) throw e;\n      if (e.errmsg.includes('emails.address')) throw new Meteor.Error(403, \"Email already exists.\");\n      if (e.errmsg.includes('username')) throw new Meteor.Error(403, \"Username already exists.\");\n      throw e;\n    }\n\n    return userId;\n  }\n\n  // Helper function: returns false if email does not match company domain from\n  // the configuration.\n  _testEmailDomain(email) {\n    const domain = this._options.restrictCreationByEmailDomain;\n    return !domain || typeof domain === 'function' && domain(email) || typeof domain === 'string' && new RegExp(\"@\".concat(Meteor._escapeRegExp(domain), \"$\"), 'i').test(email);\n  }\n\n  ///\n  /// CLEAN UP FOR `logoutOtherClients`\n  ///\n  _deleteSavedTokensForUser(userId, tokensToDelete) {\n    if (tokensToDelete) {\n      this.users.update(userId, {\n        $unset: {\n          \"services.resume.haveLoginTokensToDelete\": 1,\n          \"services.resume.loginTokensToDelete\": 1\n        },\n        $pullAll: {\n          \"services.resume.loginTokens\": tokensToDelete\n        }\n      });\n    }\n  }\n\n  _deleteSavedTokensForAllUsersOnStartup() {\n    // If we find users who have saved tokens to delete on startup, delete\n    // them now. It's possible that the server could have crashed and come\n    // back up before new tokens are found in localStorage, but this\n    // shouldn't happen very often. We shouldn't put a delay here because\n    // that would give a lot of power to an attacker with a stolen login\n    // token and the ability to crash the server.\n    Meteor.startup(() => {\n      this.users.find({\n        \"services.resume.haveLoginTokensToDelete\": true\n      }, {\n        fields: {\n          \"services.resume.loginTokensToDelete\": 1\n        }\n      }).forEach(user => {\n        this._deleteSavedTokensForUser(user._id, user.services.resume.loginTokensToDelete);\n      });\n    });\n  }\n\n  ///\n  /// MANAGING USER OBJECTS\n  ///\n  // Updates or creates a user after we authenticate with a 3rd party.\n  //\n  // @param serviceName {String} Service name (eg, twitter).\n  // @param serviceData {Object} Data to store in the user's record\n  //        under services[serviceName]. Must include an \"id\" field\n  //        which is a unique identifier for the user in the service.\n  // @param options {Object, optional} Other options to pass to insertUserDoc\n  //        (eg, profile)\n  // @returns {Object} Object with token and id keys, like the result\n  //        of the \"login\" method.\n  //\n  updateOrCreateUserFromExternalService(serviceName, serviceData, options) {\n    options = _objectSpread({}, options);\n\n    if (serviceName === \"password\" || serviceName === \"resume\") {\n      throw new Error(\"Can't use updateOrCreateUserFromExternalService with internal service \" + serviceName);\n    }\n\n    if (!hasOwn.call(serviceData, 'id')) {\n      throw new Error(\"Service data for service \".concat(serviceName, \" must include id\"));\n    } // Look for a user with the appropriate service user id.\n\n\n    const selector = {};\n    const serviceIdKey = \"services.\".concat(serviceName, \".id\"); // XXX Temporary special case for Twitter. (Issue #629)\n    //   The serviceData.id will be a string representation of an integer.\n    //   We want it to match either a stored string or int representation.\n    //   This is to cater to earlier versions of Meteor storing twitter\n    //   user IDs in number form, and recent versions storing them as strings.\n    //   This can be removed once migration technology is in place, and twitter\n    //   users stored with integer IDs have been migrated to string IDs.\n\n    if (serviceName === \"twitter\" && !isNaN(serviceData.id)) {\n      selector[\"$or\"] = [{}, {}];\n      selector[\"$or\"][0][serviceIdKey] = serviceData.id;\n      selector[\"$or\"][1][serviceIdKey] = parseInt(serviceData.id, 10);\n    } else {\n      selector[serviceIdKey] = serviceData.id;\n    }\n\n    let user = this.users.findOne(selector, {\n      fields: this._options.defaultFieldSelector\n    }); // Check to see if the developer has a custom way to find the user outside\n    // of the general selectors above.\n\n    if (!user && this._additionalFindUserOnExternalLogin) {\n      user = this._additionalFindUserOnExternalLogin({\n        serviceName,\n        serviceData,\n        options\n      });\n    } // Before continuing, run user hook to see if we should continue\n\n\n    if (this._beforeExternalLoginHook && !this._beforeExternalLoginHook(serviceName, serviceData, user)) {\n      throw new Meteor.Error(403, \"Login forbidden\");\n    } // When creating a new user we pass through all options. When updating an\n    // existing user, by default we only process/pass through the serviceData\n    // (eg, so that we keep an unexpired access token and don't cache old email\n    // addresses in serviceData.email). The onExternalLogin hook can be used when\n    // creating or updating a user, to modify or pass through more options as\n    // needed.\n\n\n    let opts = user ? {} : options;\n\n    if (this._onExternalLoginHook) {\n      opts = this._onExternalLoginHook(options, user);\n    }\n\n    if (user) {\n      pinEncryptedFieldsToUser(serviceData, user._id);\n      let setAttrs = {};\n      Object.keys(serviceData).forEach(key => setAttrs[\"services.\".concat(serviceName, \".\").concat(key)] = serviceData[key]); // XXX Maybe we should re-use the selector above and notice if the update\n      //     touches nothing?\n\n      setAttrs = _objectSpread(_objectSpread({}, setAttrs), opts);\n      this.users.update(user._id, {\n        $set: setAttrs\n      });\n      return {\n        type: serviceName,\n        userId: user._id\n      };\n    } else {\n      // Create a new user with the service data.\n      user = {\n        services: {}\n      };\n      user.services[serviceName] = serviceData;\n      return {\n        type: serviceName,\n        userId: this.insertUserDoc(opts, user)\n      };\n    }\n  }\n\n  // Removes default rate limiting rule\n  removeDefaultRateLimit() {\n    const resp = DDPRateLimiter.removeRule(this.defaultRateLimiterRuleId);\n    this.defaultRateLimiterRuleId = null;\n    return resp;\n  }\n\n  // Add a default rule of limiting logins, creating new users and password reset\n  // to 5 times every 10 seconds per connection.\n  addDefaultRateLimit() {\n    if (!this.defaultRateLimiterRuleId) {\n      this.defaultRateLimiterRuleId = DDPRateLimiter.addRule({\n        userId: null,\n        clientAddress: null,\n        type: 'method',\n        name: name => ['login', 'createUser', 'resetPassword', 'forgotPassword'].includes(name),\n        connectionId: connectionId => true\n      }, 5, 10000);\n    }\n  }\n\n  /**\n   * @summary Creates options for email sending for reset password and enroll account emails.\n   * You can use this function when customizing a reset password or enroll account email sending.\n   * @locus Server\n   * @param {Object} email Which address of the user's to send the email to.\n   * @param {Object} user The user object to generate options for.\n   * @param {String} url URL to which user is directed to confirm the email.\n   * @param {String} reason `resetPassword` or `enrollAccount`.\n   * @returns {Object} Options which can be passed to `Email.send`.\n   * @importFromPackage accounts-base\n   */\n  generateOptionsForEmail(email, user, url, reason) {\n    let extra = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n    const options = {\n      to: email,\n      from: this.emailTemplates[reason].from ? this.emailTemplates[reason].from(user) : this.emailTemplates.from,\n      subject: this.emailTemplates[reason].subject(user, url, extra)\n    };\n\n    if (typeof this.emailTemplates[reason].text === 'function') {\n      options.text = this.emailTemplates[reason].text(user, url, extra);\n    }\n\n    if (typeof this.emailTemplates[reason].html === 'function') {\n      options.html = this.emailTemplates[reason].html(user, url, extra);\n    }\n\n    if (typeof this.emailTemplates.headers === 'object') {\n      options.headers = this.emailTemplates.headers;\n    }\n\n    return options;\n  }\n\n  _checkForCaseInsensitiveDuplicates(fieldName, displayName, fieldValue, ownUserId) {\n    // Some tests need the ability to add users with the same case insensitive\n    // value, hence the _skipCaseInsensitiveChecksForTest check\n    const skipCheck = Object.prototype.hasOwnProperty.call(this._skipCaseInsensitiveChecksForTest, fieldValue);\n\n    if (fieldValue && !skipCheck) {\n      const matchedUsers = Meteor.users.find(this._selectorForFastCaseInsensitiveLookup(fieldName, fieldValue), {\n        fields: {\n          _id: 1\n        },\n        // we only need a maximum of 2 users for the logic below to work\n        limit: 2\n      }).fetch();\n\n      if (matchedUsers.length > 0 && ( // If we don't have a userId yet, any match we find is a duplicate\n      !ownUserId || // Otherwise, check to see if there are multiple matches or a match\n      // that is not us\n      matchedUsers.length > 1 || matchedUsers[0]._id !== ownUserId)) {\n        this._handleError(\"\".concat(displayName, \" already exists.\"));\n      }\n    }\n  }\n\n  _createUserCheckingDuplicates(_ref) {\n    let {\n      user,\n      email,\n      username,\n      options\n    } = _ref;\n\n    const newUser = _objectSpread(_objectSpread(_objectSpread({}, user), username ? {\n      username\n    } : {}), email ? {\n      emails: [{\n        address: email,\n        verified: false\n      }]\n    } : {}); // Perform a case insensitive check before insert\n\n\n    this._checkForCaseInsensitiveDuplicates('username', 'Username', username);\n\n    this._checkForCaseInsensitiveDuplicates('emails.address', 'Email', email);\n\n    const userId = this.insertUserDoc(options, newUser); // Perform another check after insert, in case a matching user has been\n    // inserted in the meantime\n\n    try {\n      this._checkForCaseInsensitiveDuplicates('username', 'Username', username, userId);\n\n      this._checkForCaseInsensitiveDuplicates('emails.address', 'Email', email, userId);\n    } catch (ex) {\n      // Remove inserted user if the check fails\n      Meteor.users.remove(userId);\n      throw ex;\n    }\n\n    return userId;\n  }\n\n}\n\n// Give each login hook callback a fresh cloned copy of the attempt\n// object, but don't clone the connection.\n//\nconst cloneAttemptWithConnection = (connection, attempt) => {\n  const clonedAttempt = EJSON.clone(attempt);\n  clonedAttempt.connection = connection;\n  return clonedAttempt;\n};\n\nconst tryLoginMethod = (type, fn) => {\n  let result;\n\n  try {\n    result = fn();\n  } catch (e) {\n    result = {\n      error: e\n    };\n  }\n\n  if (result && !result.type && type) result.type = type;\n  return result;\n};\n\nconst setupDefaultLoginHandlers = accounts => {\n  accounts.registerLoginHandler(\"resume\", function (options) {\n    return defaultResumeLoginHandler.call(this, accounts, options);\n  });\n}; // Login handler for resume tokens.\n\n\nconst defaultResumeLoginHandler = (accounts, options) => {\n  if (!options.resume) return undefined;\n  check(options.resume, String);\n\n  const hashedToken = accounts._hashLoginToken(options.resume); // First look for just the new-style hashed login token, to avoid\n  // sending the unhashed token to the database in a query if we don't\n  // need to.\n\n\n  let user = accounts.users.findOne({\n    \"services.resume.loginTokens.hashedToken\": hashedToken\n  }, {\n    fields: {\n      \"services.resume.loginTokens.$\": 1\n    }\n  });\n\n  if (!user) {\n    // If we didn't find the hashed login token, try also looking for\n    // the old-style unhashed token.  But we need to look for either\n    // the old-style token OR the new-style token, because another\n    // client connection logging in simultaneously might have already\n    // converted the token.\n    user = accounts.users.findOne({\n      $or: [{\n        \"services.resume.loginTokens.hashedToken\": hashedToken\n      }, {\n        \"services.resume.loginTokens.token\": options.resume\n      }]\n    }, // Note: Cannot use ...loginTokens.$ positional operator with $or query.\n    {\n      fields: {\n        \"services.resume.loginTokens\": 1\n      }\n    });\n  }\n\n  if (!user) return {\n    error: new Meteor.Error(403, \"You've been logged out by the server. Please log in again.\")\n  }; // Find the token, which will either be an object with fields\n  // {hashedToken, when} for a hashed token or {token, when} for an\n  // unhashed token.\n\n  let oldUnhashedStyleToken;\n  let token = user.services.resume.loginTokens.find(token => token.hashedToken === hashedToken);\n\n  if (token) {\n    oldUnhashedStyleToken = false;\n  } else {\n    token = user.services.resume.loginTokens.find(token => token.token === options.resume);\n    oldUnhashedStyleToken = true;\n  }\n\n  const tokenExpires = accounts._tokenExpiration(token.when);\n\n  if (new Date() >= tokenExpires) return {\n    userId: user._id,\n    error: new Meteor.Error(403, \"Your session has expired. Please log in again.\")\n  }; // Update to a hashed token when an unhashed token is encountered.\n\n  if (oldUnhashedStyleToken) {\n    // Only add the new hashed token if the old unhashed token still\n    // exists (this avoids resurrecting the token if it was deleted\n    // after we read it).  Using $addToSet avoids getting an index\n    // error if another client logging in simultaneously has already\n    // inserted the new hashed token.\n    accounts.users.update({\n      _id: user._id,\n      \"services.resume.loginTokens.token\": options.resume\n    }, {\n      $addToSet: {\n        \"services.resume.loginTokens\": {\n          \"hashedToken\": hashedToken,\n          \"when\": token.when\n        }\n      }\n    }); // Remove the old token *after* adding the new, since otherwise\n    // another client trying to login between our removing the old and\n    // adding the new wouldn't find a token to login with.\n\n    accounts.users.update(user._id, {\n      $pull: {\n        \"services.resume.loginTokens\": {\n          \"token\": options.resume\n        }\n      }\n    });\n  }\n\n  return {\n    userId: user._id,\n    stampedLoginToken: {\n      token: options.resume,\n      when: token.when\n    }\n  };\n};\n\nconst expirePasswordToken = (accounts, oldestValidDate, tokenFilter, userId) => {\n  // boolean value used to determine if this method was called from enroll account workflow\n  let isEnroll = false;\n  const userFilter = userId ? {\n    _id: userId\n  } : {}; // check if this method was called from enroll account workflow\n\n  if (tokenFilter['services.password.enroll.reason']) {\n    isEnroll = true;\n  }\n\n  let resetRangeOr = {\n    $or: [{\n      \"services.password.reset.when\": {\n        $lt: oldestValidDate\n      }\n    }, {\n      \"services.password.reset.when\": {\n        $lt: +oldestValidDate\n      }\n    }]\n  };\n\n  if (isEnroll) {\n    resetRangeOr = {\n      $or: [{\n        \"services.password.enroll.when\": {\n          $lt: oldestValidDate\n        }\n      }, {\n        \"services.password.enroll.when\": {\n          $lt: +oldestValidDate\n        }\n      }]\n    };\n  }\n\n  const expireFilter = {\n    $and: [tokenFilter, resetRangeOr]\n  };\n\n  if (isEnroll) {\n    accounts.users.update(_objectSpread(_objectSpread({}, userFilter), expireFilter), {\n      $unset: {\n        \"services.password.enroll\": \"\"\n      }\n    }, {\n      multi: true\n    });\n  } else {\n    accounts.users.update(_objectSpread(_objectSpread({}, userFilter), expireFilter), {\n      $unset: {\n        \"services.password.reset\": \"\"\n      }\n    }, {\n      multi: true\n    });\n  }\n};\n\nconst setExpireTokensInterval = accounts => {\n  accounts.expireTokenInterval = Meteor.setInterval(() => {\n    accounts._expireTokens();\n\n    accounts._expirePasswordResetTokens();\n\n    accounts._expirePasswordEnrollTokens();\n  }, EXPIRE_TOKENS_INTERVAL_MS);\n}; ///\n/// OAuth Encryption Support\n///\n\n\nconst OAuthEncryption = Package[\"oauth-encryption\"] && Package[\"oauth-encryption\"].OAuthEncryption;\n\nconst usingOAuthEncryption = () => {\n  return OAuthEncryption && OAuthEncryption.keyIsLoaded();\n}; // OAuth service data is temporarily stored in the pending credentials\n// collection during the oauth authentication process.  Sensitive data\n// such as access tokens are encrypted without the user id because\n// we don't know the user id yet.  We re-encrypt these fields with the\n// user id included when storing the service data permanently in\n// the users collection.\n//\n\n\nconst pinEncryptedFieldsToUser = (serviceData, userId) => {\n  Object.keys(serviceData).forEach(key => {\n    let value = serviceData[key];\n    if (OAuthEncryption && OAuthEncryption.isSealed(value)) value = OAuthEncryption.seal(OAuthEncryption.open(value), userId);\n    serviceData[key] = value;\n  });\n}; // Encrypt unencrypted login service secrets when oauth-encryption is\n// added.\n//\n// XXX For the oauthSecretKey to be available here at startup, the\n// developer must call Accounts.config({oauthSecretKey: ...}) at load\n// time, instead of in a Meteor.startup block, because the startup\n// block in the app code will run after this accounts-base startup\n// block.  Perhaps we need a post-startup callback?\n\n\nMeteor.startup(() => {\n  if (!usingOAuthEncryption()) {\n    return;\n  }\n\n  const {\n    ServiceConfiguration\n  } = Package['service-configuration'];\n  ServiceConfiguration.configurations.find({\n    $and: [{\n      secret: {\n        $exists: true\n      }\n    }, {\n      \"secret.algorithm\": {\n        $exists: false\n      }\n    }]\n  }).forEach(config => {\n    ServiceConfiguration.configurations.update(config._id, {\n      $set: {\n        secret: OAuthEncryption.seal(config.secret)\n      }\n    });\n  });\n}); // XXX see comment on Accounts.createUser in passwords_server about adding a\n// second \"server options\" argument.\n\nconst defaultCreateUserHook = (options, user) => {\n  if (options.profile) user.profile = options.profile;\n  return user;\n}; // Validate new user's email or Google/Facebook/GitHub account's email\n\n\nfunction defaultValidateNewUserHook(user) {\n  const domain = this._options.restrictCreationByEmailDomain;\n\n  if (!domain) {\n    return true;\n  }\n\n  let emailIsGood = false;\n\n  if (user.emails && user.emails.length > 0) {\n    emailIsGood = user.emails.reduce((prev, email) => prev || this._testEmailDomain(email.address), false);\n  } else if (user.services && Object.values(user.services).length > 0) {\n    // Find any email of any service and check it\n    emailIsGood = Object.values(user.services).reduce((prev, service) => service.email && this._testEmailDomain(service.email), false);\n  }\n\n  if (emailIsGood) {\n    return true;\n  }\n\n  if (typeof domain === 'string') {\n    throw new Meteor.Error(403, \"@\".concat(domain, \" email required\"));\n  } else {\n    throw new Meteor.Error(403, \"Email doesn't match the criteria.\");\n  }\n}\n\nconst setupUsersCollection = users => {\n  ///\n  /// RESTRICTING WRITES TO USER OBJECTS\n  ///\n  users.allow({\n    // clients can modify the profile field of their own document, and\n    // nothing else.\n    update: (userId, user, fields, modifier) => {\n      // make sure it is our record\n      if (user._id !== userId) {\n        return false;\n      } // user can only modify the 'profile' field. sets to multiple\n      // sub-keys (eg profile.foo and profile.bar) are merged into entry\n      // in the fields list.\n\n\n      if (fields.length !== 1 || fields[0] !== 'profile') {\n        return false;\n      }\n\n      return true;\n    },\n    fetch: ['_id'] // we only look at _id.\n\n  }); /// DEFAULT INDEXES ON USERS\n\n  users.createIndex('username', {\n    unique: true,\n    sparse: true\n  });\n  users.createIndex('emails.address', {\n    unique: true,\n    sparse: true\n  });\n  users.createIndex('services.resume.loginTokens.hashedToken', {\n    unique: true,\n    sparse: true\n  });\n  users.createIndex('services.resume.loginTokens.token', {\n    unique: true,\n    sparse: true\n  }); // For taking care of logoutOtherClients calls that crashed before the\n  // tokens were deleted.\n\n  users.createIndex('services.resume.haveLoginTokensToDelete', {\n    sparse: true\n  }); // For expiring login tokens\n\n  users.createIndex(\"services.resume.loginTokens.when\", {\n    sparse: true\n  }); // For expiring password tokens\n\n  users.createIndex('services.password.reset.when', {\n    sparse: true\n  });\n  users.createIndex('services.password.enroll.when', {\n    sparse: true\n  });\n}; // Generates permutations of all case variations of a given string.\n\n\nconst generateCasePermutationsForString = string => {\n  let permutations = [''];\n\n  for (let i = 0; i < string.length; i++) {\n    const ch = string.charAt(i);\n    permutations = [].concat(...permutations.map(prefix => {\n      const lowerCaseChar = ch.toLowerCase();\n      const upperCaseChar = ch.toUpperCase(); // Don't add unnecessary permutations when ch is not a letter\n\n      if (lowerCaseChar === upperCaseChar) {\n        return [prefix + ch];\n      } else {\n        return [prefix + lowerCaseChar, prefix + upperCaseChar];\n      }\n    }));\n  }\n\n  return permutations;\n};","map":{"version":3,"sources":["packages/accounts-base/accounts_server.js"],"names":["_objectWithoutProperties","module","link","default","v","_objectSpread","export","AccountsServer","crypto","AccountsCommon","EXPIRE_TOKENS_INTERVAL_MS","URL","hasOwn","Object","prototype","hasOwnProperty","NonEmptyString","Match","Where","x","check","String","length","constructor","server","onCreateLoginToken","func","_onCreateLoginTokenHook","Error","_selectorForFastCaseInsensitiveLookup","fieldName","string","prefix","substring","Math","min","orClause","generateCasePermutationsForString","map","prefixPermutation","selector","RegExp","Meteor","_escapeRegExp","caseInsensitiveClause","$and","$or","_findUserByQuery","query","options","user","id","users","findOne","_addDefaultFieldSelector","fieldValue","username","email","candidateUsers","find","fetch","_handleError","msg","throwError","errorCode","error","_options","ambiguousErrorMessages","_userQueryValidator","Optional","keys","_server","_initServerMethods","_initAccountDataHooks","_autopublishFields","loggedInUser","otherUsers","_defaultPublishFields","projection","profile","emails","_initServerPublications","_accountData","_userObservesForConnections","_nextUserObserveNumber","_loginHandlers","setupUsersCollection","setupDefaultLoginHandlers","setExpireTokensInterval","_validateLoginHook","Hook","bindEnvironment","_validateNewUserHooks","defaultValidateNewUserHook","bind","_deleteSavedTokensForAllUsersOnStartup","_skipCaseInsensitiveChecksForTest","urls","resetPassword","token","extraParams","buildEmailUrl","verifyEmail","loginToken","enrollAccount","addDefaultRateLimit","path","url","absoluteUrl","params","entries","key","value","searchParams","append","toString","userId","currentInvocation","DDP","_CurrentMethodInvocation","get","_CurrentPublicationInvocation","validateLoginAttempt","register","validateNewUser","push","beforeExternalLogin","_beforeExternalLoginHook","onCreateUser","_onCreateUserHook","onExternalLogin","_onExternalLoginHook","setAdditionalFindUserOnExternalLogin","_additionalFindUserOnExternalLogin","_validateLogin","connection","attempt","forEach","callback","ret","cloneAttemptWithConnection","e","allowed","_successfulLogin","_onLoginHook","each","_failedLogin","_onLoginFailureHook","_successfulLogout","_onLogoutHook","fields","defaultFieldSelector","_loginUser","methodInvocation","stampedLoginToken","_generateStampedLoginToken","_insertLoginToken","_noYieldsAllowed","_setLoginToken","_hashLoginToken","setUserId","tokenExpires","_tokenExpiration","when","_attemptLogin","methodName","methodArgs","result","type","methodArguments","Array","from","_loginMethod","fn","tryLoginMethod","_reportLoginFailure","registerLoginHandler","name","handler","_runLoginHandlers","call","undefined","destroyToken","update","$pull","hashedToken","accounts","methods","login","arguments","logout","_getLoginToken","getNewToken","currentHashedToken","currentStampedToken","services","resume","loginTokens","stampedToken","newStampedToken","removeOtherTokens","currentToken","$ne","configureLoginService","ObjectIncluding","service","oauth","serviceNames","includes","ServiceConfiguration","Package","configurations","usingOAuthEncryption","secret","OAuthEncryption","seal","insert","onConnection","onClose","_removeTokenFromConnection","publish","is_auto","startup","customFields","_id","autopublish","toFieldSelector","reduce","prev","field","addAutopublishFields","opts","apply","forLoggedInUser","forOtherUsers","setDefaultPublishFields","_getAccountData","connectionId","data","_setAccountData","hash","createHash","digest","_hashStampedToken","hashedStampedToken","_insertHashedLoginToken","$addToSet","_clearAllLoginTokens","$set","_getUserObserve","observe","stop","newToken","myObserveNumber","defer","foundMatchingUser","observeChanges","added","removed","close","nonMutatingCallbacks","Random","Date","_expirePasswordResetTokens","oldestValidDate","tokenLifetimeMs","_getPasswordResetTokenLifetimeMs","tokenFilter","$exists","expirePasswordToken","_expirePasswordEnrollTokens","_getPasswordEnrollTokenLifetimeMs","_expireTokens","_getTokenLifetimeMs","userFilter","$lt","multi","config","superResult","loginExpirationInDays","expireTokenInterval","clearInterval","insertUserDoc","createdAt","pinEncryptedFieldsToUser","fullUser","defaultCreateUserHook","hook","errmsg","_testEmailDomain","domain","restrictCreationByEmailDomain","test","_deleteSavedTokensForUser","tokensToDelete","$unset","$pullAll","loginTokensToDelete","updateOrCreateUserFromExternalService","serviceName","serviceData","serviceIdKey","isNaN","parseInt","setAttrs","removeDefaultRateLimit","resp","DDPRateLimiter","removeRule","defaultRateLimiterRuleId","addRule","clientAddress","generateOptionsForEmail","reason","extra","to","emailTemplates","subject","text","html","headers","_checkForCaseInsensitiveDuplicates","displayName","ownUserId","skipCheck","matchedUsers","limit","_createUserCheckingDuplicates","newUser","address","verified","ex","remove","clonedAttempt","EJSON","clone","defaultResumeLoginHandler","oldUnhashedStyleToken","isEnroll","resetRangeOr","expireFilter","setInterval","keyIsLoaded","isSealed","open","emailIsGood","values","allow","modifier","createIndex","unique","sparse","permutations","i","ch","charAt","concat","lowerCaseChar","toLowerCase","upperCaseChar","toUpperCase"],"mappings":"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","sourcesContent":["import crypto from 'crypto';\nimport {\n  AccountsCommon,\n  EXPIRE_TOKENS_INTERVAL_MS,\n} from './accounts_common.js';\nimport { URL } from 'meteor/url';\n\nconst hasOwn = Object.prototype.hasOwnProperty;\n\n// XXX maybe this belongs in the check package\nconst NonEmptyString = Match.Where(x => {\n  check(x, String);\n  return x.length > 0;\n});\n\n/**\n * @summary Constructor for the `Accounts` namespace on the server.\n * @locus Server\n * @class AccountsServer\n * @extends AccountsCommon\n * @instancename accountsServer\n * @param {Object} server A server object such as `Meteor.server`.\n */\nexport class AccountsServer extends AccountsCommon {\n  // Note that this constructor is less likely to be instantiated multiple\n  // times than the `AccountsClient` constructor, because a single server\n  // can provide only one set of methods.\n  constructor(server) {\n    super();\n\n    this._server = server || Meteor.server;\n    // Set up the server's methods, as if by calling Meteor.methods.\n    this._initServerMethods();\n\n    this._initAccountDataHooks();\n\n    // If autopublish is on, publish these user fields. Login service\n    // packages (eg accounts-google) add to these by calling\n    // addAutopublishFields.  Notably, this isn't implemented with multiple\n    // publishes since DDP only merges only across top-level fields, not\n    // subfields (such as 'services.facebook.accessToken')\n    this._autopublishFields = {\n      loggedInUser: ['profile', 'username', 'emails'],\n      otherUsers: ['profile', 'username']\n    };\n\n    // use object to keep the reference when used in functions\n    // where _defaultPublishFields is destructured into lexical scope\n    // for publish callbacks that need `this`\n    this._defaultPublishFields = {\n      projection: {\n        profile: 1,\n        username: 1,\n        emails: 1,\n      }\n    };\n\n    this._initServerPublications();\n\n    // connectionId -> {connection, loginToken}\n    this._accountData = {};\n\n    // connection id -> observe handle for the login token that this connection is\n    // currently associated with, or a number. The number indicates that we are in\n    // the process of setting up the observe (using a number instead of a single\n    // sentinel allows multiple attempts to set up the observe to identify which\n    // one was theirs).\n    this._userObservesForConnections = {};\n    this._nextUserObserveNumber = 1;  // for the number described above.\n\n    // list of all registered handlers.\n    this._loginHandlers = [];\n\n    setupUsersCollection(this.users);\n    setupDefaultLoginHandlers(this);\n    setExpireTokensInterval(this);\n\n    this._validateLoginHook = new Hook({ bindEnvironment: false });\n    this._validateNewUserHooks = [\n      defaultValidateNewUserHook.bind(this)\n    ];\n\n    this._deleteSavedTokensForAllUsersOnStartup();\n\n    this._skipCaseInsensitiveChecksForTest = {};\n\n    this.urls = {\n      resetPassword: (token, extraParams) => this.buildEmailUrl(`#/reset-password/${token}`, extraParams),\n      verifyEmail: (token, extraParams) => this.buildEmailUrl(`#/verify-email/${token}`, extraParams),\n      loginToken: (selector, token, extraParams) =>\n        this.buildEmailUrl(`/?loginToken=${token}&selector=${selector}`, extraParams),\n      enrollAccount: (token, extraParams) => this.buildEmailUrl(`#/enroll-account/${token}`, extraParams),\n    };\n\n    this.addDefaultRateLimit();\n\n    this.buildEmailUrl = (path, extraParams = {}) => {\n      const url = new URL(Meteor.absoluteUrl(path));\n      const params = Object.entries(extraParams);\n      if (params.length > 0) {\n        // Add additional parameters to the url\n        for (const [key, value] of params) {\n          url.searchParams.append(key, value);\n        }\n      }\n      return url.toString();\n    };\n  }\n\n  ///\n  /// CURRENT USER\n  ///\n\n  // @override of \"abstract\" non-implementation in accounts_common.js\n  userId() {\n    // This function only works if called inside a method or a pubication.\n    // Using any of the information from Meteor.user() in a method or\n    // publish function will always use the value from when the function first\n    // runs. This is likely not what the user expects. The way to make this work\n    // in a method or publish function is to do Meteor.find(this.userId).observe\n    // and recompute when the user record changes.\n    const currentInvocation = DDP._CurrentMethodInvocation.get() || DDP._CurrentPublicationInvocation.get();\n    if (!currentInvocation)\n      throw new Error(\"Meteor.userId can only be invoked in method calls or publications.\");\n    return currentInvocation.userId;\n  }\n\n  ///\n  /// LOGIN HOOKS\n  ///\n\n  /**\n   * @summary Validate login attempts.\n   * @locus Server\n   * @param {Function} func Called whenever a login is attempted (either successful or unsuccessful).  A login can be aborted by returning a falsy value or throwing an exception.\n   */\n  validateLoginAttempt(func) {\n    // Exceptions inside the hook callback are passed up to us.\n    return this._validateLoginHook.register(func);\n  }\n\n  /**\n   * @summary Set restrictions on new user creation.\n   * @locus Server\n   * @param {Function} func Called whenever a new user is created. Takes the new user object, and returns true to allow the creation or false to abort.\n   */\n  validateNewUser(func) {\n    this._validateNewUserHooks.push(func);\n  }\n\n  /**\n   * @summary Validate login from external service\n   * @locus Server\n   * @param {Function} func Called whenever login/user creation from external service is attempted. Login or user creation based on this login can be aborted by passing a falsy value or throwing an exception.\n   */\n  beforeExternalLogin(func) {\n    if (this._beforeExternalLoginHook) {\n      throw new Error(\"Can only call beforeExternalLogin once\");\n    }\n\n    this._beforeExternalLoginHook = func;\n  }\n\n  ///\n  /// CREATE USER HOOKS\n  ///\n\n  /**\n   * @summary Customize login token creation.\n   * @locus Server\n   * @param {Function} func Called whenever a new token is created.\n   * Return the sequence and the user object. Return true to keep sending the default email, or false to override the behavior.\n   */\n  onCreateLoginToken = function(func) {\n    if (this._onCreateLoginTokenHook) {\n      throw new Error('Can only call onCreateLoginToken once');\n    }\n\n    this._onCreateLoginTokenHook = func;\n  };\n\n  /**\n   * @summary Customize new user creation.\n   * @locus Server\n   * @param {Function} func Called whenever a new user is created. Return the new user object, or throw an `Error` to abort the creation.\n   */\n  onCreateUser(func) {\n    if (this._onCreateUserHook) {\n      throw new Error(\"Can only call onCreateUser once\");\n    }\n\n    this._onCreateUserHook = func;\n  }\n\n  /**\n   * @summary Customize oauth user profile updates\n   * @locus Server\n   * @param {Function} func Called whenever a user is logged in via oauth. Return the profile object to be merged, or throw an `Error` to abort the creation.\n   */\n  onExternalLogin(func) {\n    if (this._onExternalLoginHook) {\n      throw new Error(\"Can only call onExternalLogin once\");\n    }\n\n    this._onExternalLoginHook = func;\n  }\n\n  /**\n   * @summary Customize user selection on external logins\n   * @locus Server\n   * @param {Function} func Called whenever a user is logged in via oauth and a\n   * user is not found with the service id. Return the user or undefined.\n   */\n  setAdditionalFindUserOnExternalLogin(func) {\n    if (this._additionalFindUserOnExternalLogin) {\n      throw new Error(\"Can only call setAdditionalFindUserOnExternalLogin once\");\n    }\n    this._additionalFindUserOnExternalLogin = func;\n  }\n\n  _validateLogin(connection, attempt) {\n    this._validateLoginHook.forEach(callback => {\n      let ret;\n      try {\n        ret = callback(cloneAttemptWithConnection(connection, attempt));\n      }\n      catch (e) {\n        attempt.allowed = false;\n        // XXX this means the last thrown error overrides previous error\n        // messages. Maybe this is surprising to users and we should make\n        // overriding errors more explicit. (see\n        // https://github.com/meteor/meteor/issues/1960)\n        attempt.error = e;\n        return true;\n      }\n      if (! ret) {\n        attempt.allowed = false;\n        // don't override a specific error provided by a previous\n        // validator or the initial attempt (eg \"incorrect password\").\n        if (!attempt.error)\n          attempt.error = new Meteor.Error(403, \"Login forbidden\");\n      }\n      return true;\n    });\n  };\n\n  _successfulLogin(connection, attempt) {\n    this._onLoginHook.each(callback => {\n      callback(cloneAttemptWithConnection(connection, attempt));\n      return true;\n    });\n  };\n\n  _failedLogin(connection, attempt) {\n    this._onLoginFailureHook.each(callback => {\n      callback(cloneAttemptWithConnection(connection, attempt));\n      return true;\n    });\n  };\n\n  _successfulLogout(connection, userId) {\n    // don't fetch the user object unless there are some callbacks registered\n    let user;\n    this._onLogoutHook.each(callback => {\n      if (!user && userId) user = this.users.findOne(userId, {fields: this._options.defaultFieldSelector});\n      callback({ user, connection });\n      return true;\n    });\n  };\n\n  // Generates a MongoDB selector that can be used to perform a fast case\n  // insensitive lookup for the given fieldName and string. Since MongoDB does\n  // not support case insensitive indexes, and case insensitive regex queries\n  // are slow, we construct a set of prefix selectors for all permutations of\n  // the first 4 characters ourselves. We first attempt to matching against\n  // these, and because 'prefix expression' regex queries do use indexes (see\n  // http://docs.mongodb.org/v2.6/reference/operator/query/regex/#index-use),\n  // this has been found to greatly improve performance (from 1200ms to 5ms in a\n  // test with 1.000.000 users).\n  _selectorForFastCaseInsensitiveLookup = (fieldName, string) => {\n    // Performance seems to improve up to 4 prefix characters\n    const prefix = string.substring(0, Math.min(string.length, 4));\n    const orClause = generateCasePermutationsForString(prefix).map(\n        prefixPermutation => {\n          const selector = {};\n          selector[fieldName] =\n              new RegExp(`^${Meteor._escapeRegExp(prefixPermutation)}`);\n          return selector;\n        });\n    const caseInsensitiveClause = {};\n    caseInsensitiveClause[fieldName] =\n        new RegExp(`^${Meteor._escapeRegExp(string)}$`, 'i')\n    return {$and: [{$or: orClause}, caseInsensitiveClause]};\n  }\n\n  _findUserByQuery = (query, options) => {\n    let user = null;\n\n    if (query.id) {\n      // default field selector is added within getUserById()\n      user = Meteor.users.findOne(query.id, this._addDefaultFieldSelector(options));\n    } else {\n      options = this._addDefaultFieldSelector(options);\n      let fieldName;\n      let fieldValue;\n      if (query.username) {\n        fieldName = 'username';\n        fieldValue = query.username;\n      } else if (query.email) {\n        fieldName = 'emails.address';\n        fieldValue = query.email;\n      } else {\n        throw new Error(\"shouldn't happen (validation missed something)\");\n      }\n      let selector = {};\n      selector[fieldName] = fieldValue;\n      user = Meteor.users.findOne(selector, options);\n      // If user is not found, try a case insensitive lookup\n      if (!user) {\n        selector = this._selectorForFastCaseInsensitiveLookup(fieldName, fieldValue);\n        const candidateUsers = Meteor.users.find(selector, options).fetch();\n        // No match if multiple candidates are found\n        if (candidateUsers.length === 1) {\n          user = candidateUsers[0];\n        }\n      }\n    }\n\n    return user;\n  }\n\n  ///\n  /// LOGIN METHODS\n  ///\n\n  // Login methods return to the client an object containing these\n  // fields when the user was logged in successfully:\n  //\n  //   id: userId\n  //   token: *\n  //   tokenExpires: *\n  //\n  // tokenExpires is optional and intends to provide a hint to the\n  // client as to when the token will expire. If not provided, the\n  // client will call Accounts._tokenExpiration, passing it the date\n  // that it received the token.\n  //\n  // The login method will throw an error back to the client if the user\n  // failed to log in.\n  //\n  //\n  // Login handlers and service specific login methods such as\n  // `createUser` internally return a `result` object containing these\n  // fields:\n  //\n  //   type:\n  //     optional string; the service name, overrides the handler\n  //     default if present.\n  //\n  //   error:\n  //     exception; if the user is not allowed to login, the reason why.\n  //\n  //   userId:\n  //     string; the user id of the user attempting to login (if\n  //     known), required for an allowed login.\n  //\n  //   options:\n  //     optional object merged into the result returned by the login\n  //     method; used by HAMK from SRP.\n  //\n  //   stampedLoginToken:\n  //     optional object with `token` and `when` indicating the login\n  //     token is already present in the database, returned by the\n  //     \"resume\" login handler.\n  //\n  // For convenience, login methods can also throw an exception, which\n  // is converted into an {error} result.  However, if the id of the\n  // user attempting the login is known, a {userId, error} result should\n  // be returned instead since the user id is not captured when an\n  // exception is thrown.\n  //\n  // This internal `result` object is automatically converted into the\n  // public {id, token, tokenExpires} object returned to the client.\n\n  // Try a login method, converting thrown exceptions into an {error}\n  // result.  The `type` argument is a default, inserted into the result\n  // object if not explicitly returned.\n  //\n  // Log in a user on a connection.\n  //\n  // We use the method invocation to set the user id on the connection,\n  // not the connection object directly. setUserId is tied to methods to\n  // enforce clear ordering of method application (using wait methods on\n  // the client, and a no setUserId after unblock restriction on the\n  // server)\n  //\n  // The `stampedLoginToken` parameter is optional.  When present, it\n  // indicates that the login token has already been inserted into the\n  // database and doesn't need to be inserted again.  (It's used by the\n  // \"resume\" login handler).\n  _loginUser(methodInvocation, userId, stampedLoginToken) {\n    if (! stampedLoginToken) {\n      stampedLoginToken = this._generateStampedLoginToken();\n      this._insertLoginToken(userId, stampedLoginToken);\n    }\n\n    // This order (and the avoidance of yields) is important to make\n    // sure that when publish functions are rerun, they see a\n    // consistent view of the world: the userId is set and matches\n    // the login token on the connection (not that there is\n    // currently a public API for reading the login token on a\n    // connection).\n    Meteor._noYieldsAllowed(() =>\n      this._setLoginToken(\n        userId,\n        methodInvocation.connection,\n        this._hashLoginToken(stampedLoginToken.token)\n      )\n    );\n\n    methodInvocation.setUserId(userId);\n\n    return {\n      id: userId,\n      token: stampedLoginToken.token,\n      tokenExpires: this._tokenExpiration(stampedLoginToken.when)\n    };\n  };\n\n  // After a login method has completed, call the login hooks.  Note\n  // that `attemptLogin` is called for *all* login attempts, even ones\n  // which aren't successful (such as an invalid password, etc).\n  //\n  // If the login is allowed and isn't aborted by a validate login hook\n  // callback, log in the user.\n  //\n  _attemptLogin(\n    methodInvocation,\n    methodName,\n    methodArgs,\n    result\n  ) {\n    if (!result)\n      throw new Error(\"result is required\");\n\n    // XXX A programming error in a login handler can lead to this occurring, and\n    // then we don't call onLogin or onLoginFailure callbacks. Should\n    // tryLoginMethod catch this case and turn it into an error?\n    if (!result.userId && !result.error)\n      throw new Error(\"A login method must specify a userId or an error\");\n\n    let user;\n    if (result.userId)\n      user = this.users.findOne(result.userId, {fields: this._options.defaultFieldSelector});\n\n    const attempt = {\n      type: result.type || \"unknown\",\n      allowed: !! (result.userId && !result.error),\n      methodName: methodName,\n      methodArguments: Array.from(methodArgs)\n    };\n    if (result.error) {\n      attempt.error = result.error;\n    }\n    if (user) {\n      attempt.user = user;\n    }\n\n    // _validateLogin may mutate `attempt` by adding an error and changing allowed\n    // to false, but that's the only change it can make (and the user's callbacks\n    // only get a clone of `attempt`).\n    this._validateLogin(methodInvocation.connection, attempt);\n\n    if (attempt.allowed) {\n      const ret = {\n        ...this._loginUser(\n          methodInvocation,\n          result.userId,\n          result.stampedLoginToken\n        ),\n        ...result.options\n      };\n      ret.type = attempt.type;\n      this._successfulLogin(methodInvocation.connection, attempt);\n      return ret;\n    }\n    else {\n      this._failedLogin(methodInvocation.connection, attempt);\n      throw attempt.error;\n    }\n  };\n\n  // All service specific login methods should go through this function.\n  // Ensure that thrown exceptions are caught and that login hook\n  // callbacks are still called.\n  //\n  _loginMethod(\n    methodInvocation,\n    methodName,\n    methodArgs,\n    type,\n    fn\n  ) {\n    return this._attemptLogin(\n      methodInvocation,\n      methodName,\n      methodArgs,\n      tryLoginMethod(type, fn)\n    );\n  };\n\n\n  // Report a login attempt failed outside the context of a normal login\n  // method. This is for use in the case where there is a multi-step login\n  // procedure (eg SRP based password login). If a method early in the\n  // chain fails, it should call this function to report a failure. There\n  // is no corresponding method for a successful login; methods that can\n  // succeed at logging a user in should always be actual login methods\n  // (using either Accounts._loginMethod or Accounts.registerLoginHandler).\n  _reportLoginFailure(\n    methodInvocation,\n    methodName,\n    methodArgs,\n    result\n  ) {\n    const attempt = {\n      type: result.type || \"unknown\",\n      allowed: false,\n      error: result.error,\n      methodName: methodName,\n      methodArguments: Array.from(methodArgs)\n    };\n\n    if (result.userId) {\n      attempt.user = this.users.findOne(result.userId, {fields: this._options.defaultFieldSelector});\n    }\n\n    this._validateLogin(methodInvocation.connection, attempt);\n    this._failedLogin(methodInvocation.connection, attempt);\n\n    // _validateLogin may mutate attempt to set a new error message. Return\n    // the modified version.\n    return attempt;\n  };\n\n  ///\n  /// LOGIN HANDLERS\n  ///\n\n  // The main entry point for auth packages to hook in to login.\n  //\n  // A login handler is a login method which can return `undefined` to\n  // indicate that the login request is not handled by this handler.\n  //\n  // @param name {String} Optional.  The service name, used by default\n  // if a specific service name isn't returned in the result.\n  //\n  // @param handler {Function} A function that receives an options object\n  // (as passed as an argument to the `login` method) and returns one of:\n  // - `undefined`, meaning don't handle;\n  // - a login method result object\n\n  registerLoginHandler(name, handler) {\n    if (! handler) {\n      handler = name;\n      name = null;\n    }\n\n    this._loginHandlers.push({\n      name: name,\n      handler: handler\n    });\n  };\n\n\n  // Checks a user's credentials against all the registered login\n  // handlers, and returns a login token if the credentials are valid. It\n  // is like the login method, except that it doesn't set the logged-in\n  // user on the connection. Throws a Meteor.Error if logging in fails,\n  // including the case where none of the login handlers handled the login\n  // request. Otherwise, returns {id: userId, token: *, tokenExpires: *}.\n  //\n  // For example, if you want to login with a plaintext password, `options` could be\n  //   { user: { username: <username> }, password: <password> }, or\n  //   { user: { email: <email> }, password: <password> }.\n\n  // Try all of the registered login handlers until one of them doesn't\n  // return `undefined`, meaning it handled this call to `login`. Return\n  // that return value.\n  _runLoginHandlers(methodInvocation, options) {\n    for (let handler of this._loginHandlers) {\n      const result = tryLoginMethod(\n        handler.name,\n        () => handler.handler.call(methodInvocation, options)\n      );\n\n      if (result) {\n        return result;\n      }\n\n      if (result !== undefined) {\n        throw new Meteor.Error(400, \"A login handler should return a result or undefined\");\n      }\n    }\n\n    return {\n      type: null,\n      error: new Meteor.Error(400, \"Unrecognized options for login request\")\n    };\n  };\n\n  // Deletes the given loginToken from the database.\n  //\n  // For new-style hashed token, this will cause all connections\n  // associated with the token to be closed.\n  //\n  // Any connections associated with old-style unhashed tokens will be\n  // in the process of becoming associated with hashed tokens and then\n  // they'll get closed.\n  destroyToken(userId, loginToken) {\n    this.users.update(userId, {\n      $pull: {\n        \"services.resume.loginTokens\": {\n          $or: [\n            { hashedToken: loginToken },\n            { token: loginToken }\n          ]\n        }\n      }\n    });\n  };\n\n  _initServerMethods() {\n    // The methods created in this function need to be created here so that\n    // this variable is available in their scope.\n    const accounts = this;\n\n\n    // This object will be populated with methods and then passed to\n    // accounts._server.methods further below.\n    const methods = {};\n\n    // @returns {Object|null}\n    //   If successful, returns {token: reconnectToken, id: userId}\n    //   If unsuccessful (for example, if the user closed the oauth login popup),\n    //     throws an error describing the reason\n    methods.login = function (options) {\n      // Login handlers should really also check whatever field they look at in\n      // options, but we don't enforce it.\n      check(options, Object);\n\n      const result = accounts._runLoginHandlers(this, options);\n\n      return accounts._attemptLogin(this, \"login\", arguments, result);\n    };\n\n    methods.logout = function () {\n      const token = accounts._getLoginToken(this.connection.id);\n      accounts._setLoginToken(this.userId, this.connection, null);\n      if (token && this.userId) {\n        accounts.destroyToken(this.userId, token);\n      }\n      accounts._successfulLogout(this.connection, this.userId);\n      this.setUserId(null);\n    };\n\n    // Generates a new login token with the same expiration as the\n    // connection's current token and saves it to the database. Associates\n    // the connection with this new token and returns it. Throws an error\n    // if called on a connection that isn't logged in.\n    //\n    // @returns Object\n    //   If successful, returns { token: <new token>, id: <user id>,\n    //   tokenExpires: <expiration date> }.\n    methods.getNewToken = function () {\n      const user = accounts.users.findOne(this.userId, {\n        fields: { \"services.resume.loginTokens\": 1 }\n      });\n      if (! this.userId || ! user) {\n        throw new Meteor.Error(\"You are not logged in.\");\n      }\n      // Be careful not to generate a new token that has a later\n      // expiration than the curren token. Otherwise, a bad guy with a\n      // stolen token could use this method to stop his stolen token from\n      // ever expiring.\n      const currentHashedToken = accounts._getLoginToken(this.connection.id);\n      const currentStampedToken = user.services.resume.loginTokens.find(\n        stampedToken => stampedToken.hashedToken === currentHashedToken\n      );\n      if (! currentStampedToken) { // safety belt: this should never happen\n        throw new Meteor.Error(\"Invalid login token\");\n      }\n      const newStampedToken = accounts._generateStampedLoginToken();\n      newStampedToken.when = currentStampedToken.when;\n      accounts._insertLoginToken(this.userId, newStampedToken);\n      return accounts._loginUser(this, this.userId, newStampedToken);\n    };\n\n    // Removes all tokens except the token associated with the current\n    // connection. Throws an error if the connection is not logged\n    // in. Returns nothing on success.\n    methods.removeOtherTokens = function () {\n      if (! this.userId) {\n        throw new Meteor.Error(\"You are not logged in.\");\n      }\n      const currentToken = accounts._getLoginToken(this.connection.id);\n      accounts.users.update(this.userId, {\n        $pull: {\n          \"services.resume.loginTokens\": { hashedToken: { $ne: currentToken } }\n        }\n      });\n    };\n\n    // Allow a one-time configuration for a login service. Modifications\n    // to this collection are also allowed in insecure mode.\n    methods.configureLoginService = (options) => {\n      check(options, Match.ObjectIncluding({service: String}));\n      // Don't let random users configure a service we haven't added yet (so\n      // that when we do later add it, it's set up with their configuration\n      // instead of ours).\n      // XXX if service configuration is oauth-specific then this code should\n      //     be in accounts-oauth; if it's not then the registry should be\n      //     in this package\n      if (!(accounts.oauth\n        && accounts.oauth.serviceNames().includes(options.service))) {\n        throw new Meteor.Error(403, \"Service unknown\");\n      }\n\n      const { ServiceConfiguration } = Package['service-configuration'];\n      if (ServiceConfiguration.configurations.findOne({service: options.service}))\n        throw new Meteor.Error(403, `Service ${options.service} already configured`);\n\n      if (hasOwn.call(options, 'secret') && usingOAuthEncryption())\n        options.secret = OAuthEncryption.seal(options.secret);\n\n      ServiceConfiguration.configurations.insert(options);\n    };\n\n    accounts._server.methods(methods);\n  };\n\n  _initAccountDataHooks() {\n    this._server.onConnection(connection => {\n      this._accountData[connection.id] = {\n        connection: connection\n      };\n\n      connection.onClose(() => {\n        this._removeTokenFromConnection(connection.id);\n        delete this._accountData[connection.id];\n      });\n    });\n  };\n\n  _initServerPublications() {\n    // Bring into lexical scope for publish callbacks that need `this`\n    const { users, _autopublishFields, _defaultPublishFields } = this;\n\n    // Publish all login service configuration fields other than secret.\n    this._server.publish(\"meteor.loginServiceConfiguration\", () => {\n      const { ServiceConfiguration } = Package['service-configuration'];\n      return ServiceConfiguration.configurations.find({}, {fields: {secret: 0}});\n    }, {is_auto: true}); // not technically autopublish, but stops the warning.\n\n    // Use Meteor.startup to give other packages a chance to call\n    // setDefaultPublishFields.\n    Meteor.startup(() => {\n      // Merge custom fields selector and default publish fields so that the client\n      // gets all the necessary fields to run properly\n      const customFields = this._addDefaultFieldSelector().fields || {};\n      const keys = Object.keys(customFields);\n      // If the custom fields are negative, then ignore them and only send the necessary fields\n      const fields = keys.length > 0 && customFields[keys[0]] ? {\n        ...this._addDefaultFieldSelector().fields,\n        ..._defaultPublishFields.projection\n      } : _defaultPublishFields.projection\n      // Publish the current user's record to the client.\n      this._server.publish(null, function () {\n        if (this.userId) {\n          return users.find({\n            _id: this.userId\n          }, {\n            fields,\n          });\n        } else {\n          return null;\n        }\n      }, /*suppress autopublish warning*/{is_auto: true});\n    });\n\n    // Use Meteor.startup to give other packages a chance to call\n    // addAutopublishFields.\n    Package.autopublish && Meteor.startup(() => {\n      // ['profile', 'username'] -> {profile: 1, username: 1}\n      const toFieldSelector = fields => fields.reduce((prev, field) => (\n          { ...prev, [field]: 1 }),\n        {}\n      );\n      this._server.publish(null, function () {\n        if (this.userId) {\n          return users.find({ _id: this.userId }, {\n            fields: toFieldSelector(_autopublishFields.loggedInUser),\n          })\n        } else {\n          return null;\n        }\n      }, /*suppress autopublish warning*/{is_auto: true});\n\n      // XXX this publish is neither dedup-able nor is it optimized by our special\n      // treatment of queries on a specific _id. Therefore this will have O(n^2)\n      // run-time performance every time a user document is changed (eg someone\n      // logging in). If this is a problem, we can instead write a manual publish\n      // function which filters out fields based on 'this.userId'.\n      this._server.publish(null, function () {\n        const selector = this.userId ? { _id: { $ne: this.userId } } : {};\n        return users.find(selector, {\n          fields: toFieldSelector(_autopublishFields.otherUsers),\n        })\n      }, /*suppress autopublish warning*/{is_auto: true});\n    });\n  };\n\n  // Add to the list of fields or subfields to be automatically\n  // published if autopublish is on. Must be called from top-level\n  // code (ie, before Meteor.startup hooks run).\n  //\n  // @param opts {Object} with:\n  //   - forLoggedInUser {Array} Array of fields published to the logged-in user\n  //   - forOtherUsers {Array} Array of fields published to users that aren't logged in\n  addAutopublishFields(opts) {\n    this._autopublishFields.loggedInUser.push.apply(\n      this._autopublishFields.loggedInUser, opts.forLoggedInUser);\n    this._autopublishFields.otherUsers.push.apply(\n      this._autopublishFields.otherUsers, opts.forOtherUsers);\n  };\n\n  // Replaces the fields to be automatically\n  // published when the user logs in\n  //\n  // @param {MongoFieldSpecifier} fields Dictionary of fields to return or exclude.\n  setDefaultPublishFields(fields) {\n    this._defaultPublishFields.projection = fields;\n  };\n\n  ///\n  /// ACCOUNT DATA\n  ///\n\n  // HACK: This is used by 'meteor-accounts' to get the loginToken for a\n  // connection. Maybe there should be a public way to do that.\n  _getAccountData(connectionId, field) {\n    const data = this._accountData[connectionId];\n    return data && data[field];\n  };\n\n  _setAccountData(connectionId, field, value) {\n    const data = this._accountData[connectionId];\n\n    // safety belt. shouldn't happen. accountData is set in onConnection,\n    // we don't have a connectionId until it is set.\n    if (!data)\n      return;\n\n    if (value === undefined)\n      delete data[field];\n    else\n      data[field] = value;\n  };\n\n  ///\n  /// RECONNECT TOKENS\n  ///\n  /// support reconnecting using a meteor login token\n\n  _hashLoginToken(loginToken) {\n    const hash = crypto.createHash('sha256');\n    hash.update(loginToken);\n    return hash.digest('base64');\n  };\n\n  // {token, when} => {hashedToken, when}\n  _hashStampedToken(stampedToken) {\n    const { token, ...hashedStampedToken } = stampedToken;\n    return {\n      ...hashedStampedToken,\n      hashedToken: this._hashLoginToken(token)\n    };\n  };\n\n  // Using $addToSet avoids getting an index error if another client\n  // logging in simultaneously has already inserted the new hashed\n  // token.\n  _insertHashedLoginToken(userId, hashedToken, query) {\n    query = query ? { ...query } : {};\n    query._id = userId;\n    this.users.update(query, {\n      $addToSet: {\n        \"services.resume.loginTokens\": hashedToken\n      }\n    });\n  };\n\n  // Exported for tests.\n  _insertLoginToken(userId, stampedToken, query) {\n    this._insertHashedLoginToken(\n      userId,\n      this._hashStampedToken(stampedToken),\n      query\n    );\n  };\n\n  _clearAllLoginTokens(userId) {\n    this.users.update(userId, {\n      $set: {\n        'services.resume.loginTokens': []\n      }\n    });\n  };\n\n  // test hook\n  _getUserObserve(connectionId) {\n    return this._userObservesForConnections[connectionId];\n  };\n\n  // Clean up this connection's association with the token: that is, stop\n  // the observe that we started when we associated the connection with\n  // this token.\n  _removeTokenFromConnection(connectionId) {\n    if (hasOwn.call(this._userObservesForConnections, connectionId)) {\n      const observe = this._userObservesForConnections[connectionId];\n      if (typeof observe === 'number') {\n        // We're in the process of setting up an observe for this connection. We\n        // can't clean up that observe yet, but if we delete the placeholder for\n        // this connection, then the observe will get cleaned up as soon as it has\n        // been set up.\n        delete this._userObservesForConnections[connectionId];\n      } else {\n        delete this._userObservesForConnections[connectionId];\n        observe.stop();\n      }\n    }\n  };\n\n  _getLoginToken(connectionId) {\n    return this._getAccountData(connectionId, 'loginToken');\n  };\n\n  // newToken is a hashed token.\n  _setLoginToken(userId, connection, newToken) {\n    this._removeTokenFromConnection(connection.id);\n    this._setAccountData(connection.id, 'loginToken', newToken);\n\n    if (newToken) {\n      // Set up an observe for this token. If the token goes away, we need\n      // to close the connection.  We defer the observe because there's\n      // no need for it to be on the critical path for login; we just need\n      // to ensure that the connection will get closed at some point if\n      // the token gets deleted.\n      //\n      // Initially, we set the observe for this connection to a number; this\n      // signifies to other code (which might run while we yield) that we are in\n      // the process of setting up an observe for this connection. Once the\n      // observe is ready to go, we replace the number with the real observe\n      // handle (unless the placeholder has been deleted or replaced by a\n      // different placehold number, signifying that the connection was closed\n      // already -- in this case we just clean up the observe that we started).\n      const myObserveNumber = ++this._nextUserObserveNumber;\n      this._userObservesForConnections[connection.id] = myObserveNumber;\n      Meteor.defer(() => {\n        // If something else happened on this connection in the meantime (it got\n        // closed, or another call to _setLoginToken happened), just do\n        // nothing. We don't need to start an observe for an old connection or old\n        // token.\n        if (this._userObservesForConnections[connection.id] !== myObserveNumber) {\n          return;\n        }\n\n        let foundMatchingUser;\n        // Because we upgrade unhashed login tokens to hashed tokens at\n        // login time, sessions will only be logged in with a hashed\n        // token. Thus we only need to observe hashed tokens here.\n        const observe = this.users.find({\n          _id: userId,\n          'services.resume.loginTokens.hashedToken': newToken\n        }, { fields: { _id: 1 } }).observeChanges({\n          added: () => {\n            foundMatchingUser = true;\n          },\n          removed: connection.close,\n          // The onClose callback for the connection takes care of\n          // cleaning up the observe handle and any other state we have\n          // lying around.\n        }, { nonMutatingCallbacks: true });\n\n        // If the user ran another login or logout command we were waiting for the\n        // defer or added to fire (ie, another call to _setLoginToken occurred),\n        // then we let the later one win (start an observe, etc) and just stop our\n        // observe now.\n        //\n        // Similarly, if the connection was already closed, then the onClose\n        // callback would have called _removeTokenFromConnection and there won't\n        // be an entry in _userObservesForConnections. We can stop the observe.\n        if (this._userObservesForConnections[connection.id] !== myObserveNumber) {\n          observe.stop();\n          return;\n        }\n\n        this._userObservesForConnections[connection.id] = observe;\n\n        if (! foundMatchingUser) {\n          // We've set up an observe on the user associated with `newToken`,\n          // so if the new token is removed from the database, we'll close\n          // the connection. But the token might have already been deleted\n          // before we set up the observe, which wouldn't have closed the\n          // connection because the observe wasn't running yet.\n          connection.close();\n        }\n      });\n    }\n  };\n\n  // (Also used by Meteor Accounts server and tests).\n  //\n  _generateStampedLoginToken() {\n    return {\n      token: Random.secret(),\n      when: new Date\n    };\n  };\n\n  ///\n  /// TOKEN EXPIRATION\n  ///\n\n  // Deletes expired password reset tokens from the database.\n  //\n  // Exported for tests. Also, the arguments are only used by\n  // tests. oldestValidDate is simulate expiring tokens without waiting\n  // for them to actually expire. userId is used by tests to only expire\n  // tokens for the test user.\n  _expirePasswordResetTokens(oldestValidDate, userId) {\n    const tokenLifetimeMs = this._getPasswordResetTokenLifetimeMs();\n\n    // when calling from a test with extra arguments, you must specify both!\n    if ((oldestValidDate && !userId) || (!oldestValidDate && userId)) {\n      throw new Error(\"Bad test. Must specify both oldestValidDate and userId.\");\n    }\n\n    oldestValidDate = oldestValidDate ||\n      (new Date(new Date() - tokenLifetimeMs));\n\n    const tokenFilter = {\n      $or: [\n        { \"services.password.reset.reason\": \"reset\"},\n        { \"services.password.reset.reason\": {$exists: false}}\n      ]\n    };\n\n    expirePasswordToken(this, oldestValidDate, tokenFilter, userId);\n  }\n\n  // Deletes expired password enroll tokens from the database.\n  //\n  // Exported for tests. Also, the arguments are only used by\n  // tests. oldestValidDate is simulate expiring tokens without waiting\n  // for them to actually expire. userId is used by tests to only expire\n  // tokens for the test user.\n  _expirePasswordEnrollTokens(oldestValidDate, userId) {\n    const tokenLifetimeMs = this._getPasswordEnrollTokenLifetimeMs();\n\n    // when calling from a test with extra arguments, you must specify both!\n    if ((oldestValidDate && !userId) || (!oldestValidDate && userId)) {\n      throw new Error(\"Bad test. Must specify both oldestValidDate and userId.\");\n    }\n\n    oldestValidDate = oldestValidDate ||\n      (new Date(new Date() - tokenLifetimeMs));\n\n    const tokenFilter = {\n      \"services.password.enroll.reason\": \"enroll\"\n    };\n\n    expirePasswordToken(this, oldestValidDate, tokenFilter, userId);\n  }\n\n  // Deletes expired tokens from the database and closes all open connections\n  // associated with these tokens.\n  //\n  // Exported for tests. Also, the arguments are only used by\n  // tests. oldestValidDate is simulate expiring tokens without waiting\n  // for them to actually expire. userId is used by tests to only expire\n  // tokens for the test user.\n  _expireTokens(oldestValidDate, userId) {\n    const tokenLifetimeMs = this._getTokenLifetimeMs();\n\n    // when calling from a test with extra arguments, you must specify both!\n    if ((oldestValidDate && !userId) || (!oldestValidDate && userId)) {\n      throw new Error(\"Bad test. Must specify both oldestValidDate and userId.\");\n    }\n\n    oldestValidDate = oldestValidDate ||\n      (new Date(new Date() - tokenLifetimeMs));\n    const userFilter = userId ? {_id: userId} : {};\n\n\n    // Backwards compatible with older versions of meteor that stored login token\n    // timestamps as numbers.\n    this.users.update({ ...userFilter,\n      $or: [\n        { \"services.resume.loginTokens.when\": { $lt: oldestValidDate } },\n        { \"services.resume.loginTokens.when\": { $lt: +oldestValidDate } }\n      ]\n    }, {\n      $pull: {\n        \"services.resume.loginTokens\": {\n          $or: [\n            { when: { $lt: oldestValidDate } },\n            { when: { $lt: +oldestValidDate } }\n          ]\n        }\n      }\n    }, { multi: true });\n    // The observe on Meteor.users will take care of closing connections for\n    // expired tokens.\n  };\n\n  // @override from accounts_common.js\n  config(options) {\n    // Call the overridden implementation of the method.\n    const superResult = AccountsCommon.prototype.config.apply(this, arguments);\n\n    // If the user set loginExpirationInDays to null, then we need to clear the\n    // timer that periodically expires tokens.\n    if (hasOwn.call(this._options, 'loginExpirationInDays') &&\n      this._options.loginExpirationInDays === null &&\n      this.expireTokenInterval) {\n      Meteor.clearInterval(this.expireTokenInterval);\n      this.expireTokenInterval = null;\n    }\n\n    return superResult;\n  };\n\n  // Called by accounts-password\n  insertUserDoc(options, user) {\n    // - clone user document, to protect from modification\n    // - add createdAt timestamp\n    // - prepare an _id, so that you can modify other collections (eg\n    // create a first task for every new user)\n    //\n    // XXX If the onCreateUser or validateNewUser hooks fail, we might\n    // end up having modified some other collection\n    // inappropriately. The solution is probably to have onCreateUser\n    // accept two callbacks - one that gets called before inserting\n    // the user document (in which you can modify its contents), and\n    // one that gets called after (in which you should change other\n    // collections)\n    user = {\n      createdAt: new Date(),\n      _id: Random.id(),\n      ...user,\n    };\n\n    if (user.services) {\n      Object.keys(user.services).forEach(service =>\n        pinEncryptedFieldsToUser(user.services[service], user._id)\n      );\n    }\n\n    let fullUser;\n    if (this._onCreateUserHook) {\n      fullUser = this._onCreateUserHook(options, user);\n\n      // This is *not* part of the API. We need this because we can't isolate\n      // the global server environment between tests, meaning we can't test\n      // both having a create user hook set and not having one set.\n      if (fullUser === 'TEST DEFAULT HOOK')\n        fullUser = defaultCreateUserHook(options, user);\n    } else {\n      fullUser = defaultCreateUserHook(options, user);\n    }\n\n    this._validateNewUserHooks.forEach(hook => {\n      if (! hook(fullUser))\n        throw new Meteor.Error(403, \"User validation failed\");\n    });\n\n    let userId;\n    try {\n      userId = this.users.insert(fullUser);\n    } catch (e) {\n      // XXX string parsing sucks, maybe\n      // https://jira.mongodb.org/browse/SERVER-3069 will get fixed one day\n      // https://jira.mongodb.org/browse/SERVER-4637\n      if (!e.errmsg) throw e;\n      if (e.errmsg.includes('emails.address'))\n        throw new Meteor.Error(403, \"Email already exists.\");\n      if (e.errmsg.includes('username'))\n        throw new Meteor.Error(403, \"Username already exists.\");\n      throw e;\n    }\n    return userId;\n  };\n\n  // Helper function: returns false if email does not match company domain from\n  // the configuration.\n  _testEmailDomain(email) {\n    const domain = this._options.restrictCreationByEmailDomain;\n\n    return !domain ||\n      (typeof domain === 'function' && domain(email)) ||\n      (typeof domain === 'string' &&\n        (new RegExp(`@${Meteor._escapeRegExp(domain)}$`, 'i')).test(email));\n  };\n\n  ///\n  /// CLEAN UP FOR `logoutOtherClients`\n  ///\n\n  _deleteSavedTokensForUser(userId, tokensToDelete) {\n    if (tokensToDelete) {\n      this.users.update(userId, {\n        $unset: {\n          \"services.resume.haveLoginTokensToDelete\": 1,\n          \"services.resume.loginTokensToDelete\": 1\n        },\n        $pullAll: {\n          \"services.resume.loginTokens\": tokensToDelete\n        }\n      });\n    }\n  };\n\n  _deleteSavedTokensForAllUsersOnStartup() {\n    // If we find users who have saved tokens to delete on startup, delete\n    // them now. It's possible that the server could have crashed and come\n    // back up before new tokens are found in localStorage, but this\n    // shouldn't happen very often. We shouldn't put a delay here because\n    // that would give a lot of power to an attacker with a stolen login\n    // token and the ability to crash the server.\n    Meteor.startup(() => {\n      this.users.find({\n        \"services.resume.haveLoginTokensToDelete\": true\n      }, {fields: {\n          \"services.resume.loginTokensToDelete\": 1\n        }}).forEach(user => {\n        this._deleteSavedTokensForUser(\n          user._id,\n          user.services.resume.loginTokensToDelete\n        );\n      });\n    });\n  };\n\n  ///\n  /// MANAGING USER OBJECTS\n  ///\n\n  // Updates or creates a user after we authenticate with a 3rd party.\n  //\n  // @param serviceName {String} Service name (eg, twitter).\n  // @param serviceData {Object} Data to store in the user's record\n  //        under services[serviceName]. Must include an \"id\" field\n  //        which is a unique identifier for the user in the service.\n  // @param options {Object, optional} Other options to pass to insertUserDoc\n  //        (eg, profile)\n  // @returns {Object} Object with token and id keys, like the result\n  //        of the \"login\" method.\n  //\n  updateOrCreateUserFromExternalService(\n    serviceName,\n    serviceData,\n    options\n  ) {\n    options = { ...options };\n\n    if (serviceName === \"password\" || serviceName === \"resume\") {\n      throw new Error(\n        \"Can't use updateOrCreateUserFromExternalService with internal service \"\n        + serviceName);\n    }\n    if (!hasOwn.call(serviceData, 'id')) {\n      throw new Error(\n        `Service data for service ${serviceName} must include id`);\n    }\n\n    // Look for a user with the appropriate service user id.\n    const selector = {};\n    const serviceIdKey = `services.${serviceName}.id`;\n\n    // XXX Temporary special case for Twitter. (Issue #629)\n    //   The serviceData.id will be a string representation of an integer.\n    //   We want it to match either a stored string or int representation.\n    //   This is to cater to earlier versions of Meteor storing twitter\n    //   user IDs in number form, and recent versions storing them as strings.\n    //   This can be removed once migration technology is in place, and twitter\n    //   users stored with integer IDs have been migrated to string IDs.\n    if (serviceName === \"twitter\" && !isNaN(serviceData.id)) {\n      selector[\"$or\"] = [{},{}];\n      selector[\"$or\"][0][serviceIdKey] = serviceData.id;\n      selector[\"$or\"][1][serviceIdKey] = parseInt(serviceData.id, 10);\n    } else {\n      selector[serviceIdKey] = serviceData.id;\n    }\n\n    let user = this.users.findOne(selector, {fields: this._options.defaultFieldSelector});\n\n    // Check to see if the developer has a custom way to find the user outside\n    // of the general selectors above.\n    if (!user && this._additionalFindUserOnExternalLogin) {\n      user = this._additionalFindUserOnExternalLogin({serviceName, serviceData, options})\n    }\n\n    // Before continuing, run user hook to see if we should continue\n    if (this._beforeExternalLoginHook && !this._beforeExternalLoginHook(serviceName, serviceData, user)) {\n      throw new Meteor.Error(403, \"Login forbidden\");\n    }\n\n    // When creating a new user we pass through all options. When updating an\n    // existing user, by default we only process/pass through the serviceData\n    // (eg, so that we keep an unexpired access token and don't cache old email\n    // addresses in serviceData.email). The onExternalLogin hook can be used when\n    // creating or updating a user, to modify or pass through more options as\n    // needed.\n    let opts = user ? {} : options;\n    if (this._onExternalLoginHook) {\n      opts = this._onExternalLoginHook(options, user);\n    }\n\n    if (user) {\n      pinEncryptedFieldsToUser(serviceData, user._id);\n\n      let setAttrs = {};\n      Object.keys(serviceData).forEach(key =>\n        setAttrs[`services.${serviceName}.${key}`] = serviceData[key]\n      );\n\n      // XXX Maybe we should re-use the selector above and notice if the update\n      //     touches nothing?\n      setAttrs = { ...setAttrs, ...opts };\n      this.users.update(user._id, {\n        $set: setAttrs\n      });\n\n      return {\n        type: serviceName,\n        userId: user._id\n      };\n    } else {\n      // Create a new user with the service data.\n      user = {services: {}};\n      user.services[serviceName] = serviceData;\n      return {\n        type: serviceName,\n        userId: this.insertUserDoc(opts, user)\n      };\n    }\n  };\n\n  // Removes default rate limiting rule\n  removeDefaultRateLimit() {\n    const resp = DDPRateLimiter.removeRule(this.defaultRateLimiterRuleId);\n    this.defaultRateLimiterRuleId = null;\n    return resp;\n  };\n\n  // Add a default rule of limiting logins, creating new users and password reset\n  // to 5 times every 10 seconds per connection.\n  addDefaultRateLimit() {\n    if (!this.defaultRateLimiterRuleId) {\n      this.defaultRateLimiterRuleId = DDPRateLimiter.addRule({\n        userId: null,\n        clientAddress: null,\n        type: 'method',\n        name: name => ['login', 'createUser', 'resetPassword', 'forgotPassword']\n          .includes(name),\n        connectionId: (connectionId) => true,\n      }, 5, 10000);\n    }\n  };\n\n  /**\n   * @summary Creates options for email sending for reset password and enroll account emails.\n   * You can use this function when customizing a reset password or enroll account email sending.\n   * @locus Server\n   * @param {Object} email Which address of the user's to send the email to.\n   * @param {Object} user The user object to generate options for.\n   * @param {String} url URL to which user is directed to confirm the email.\n   * @param {String} reason `resetPassword` or `enrollAccount`.\n   * @returns {Object} Options which can be passed to `Email.send`.\n   * @importFromPackage accounts-base\n   */\n  generateOptionsForEmail(email, user, url, reason, extra = {}){\n    const options = {\n      to: email,\n      from: this.emailTemplates[reason].from\n        ? this.emailTemplates[reason].from(user)\n        : this.emailTemplates.from,\n      subject: this.emailTemplates[reason].subject(user, url, extra),\n    };\n\n    if (typeof this.emailTemplates[reason].text === 'function') {\n      options.text = this.emailTemplates[reason].text(user, url, extra);\n    }\n\n    if (typeof this.emailTemplates[reason].html === 'function') {\n      options.html = this.emailTemplates[reason].html(user, url, extra);\n    }\n\n    if (typeof this.emailTemplates.headers === 'object') {\n      options.headers = this.emailTemplates.headers;\n    }\n\n    return options;\n  };\n\n  _checkForCaseInsensitiveDuplicates(\n    fieldName,\n    displayName,\n    fieldValue,\n    ownUserId\n  ) {\n    // Some tests need the ability to add users with the same case insensitive\n    // value, hence the _skipCaseInsensitiveChecksForTest check\n    const skipCheck = Object.prototype.hasOwnProperty.call(\n      this._skipCaseInsensitiveChecksForTest,\n      fieldValue\n    );\n\n    if (fieldValue && !skipCheck) {\n      const matchedUsers = Meteor.users\n        .find(\n          this._selectorForFastCaseInsensitiveLookup(fieldName, fieldValue),\n          {\n            fields: { _id: 1 },\n            // we only need a maximum of 2 users for the logic below to work\n            limit: 2,\n          }\n        )\n        .fetch();\n\n      if (\n        matchedUsers.length > 0 &&\n        // If we don't have a userId yet, any match we find is a duplicate\n        (!ownUserId ||\n          // Otherwise, check to see if there are multiple matches or a match\n          // that is not us\n          matchedUsers.length > 1 || matchedUsers[0]._id !== ownUserId)\n      ) {\n        this._handleError(`${displayName} already exists.`);\n      }\n    }\n  };\n\n  _createUserCheckingDuplicates({ user, email, username, options }) {\n    const newUser = {\n      ...user,\n      ...(username ? { username } : {}),\n      ...(email ? { emails: [{ address: email, verified: false }] } : {}),\n    };\n\n    // Perform a case insensitive check before insert\n    this._checkForCaseInsensitiveDuplicates('username', 'Username', username);\n    this._checkForCaseInsensitiveDuplicates('emails.address', 'Email', email);\n\n    const userId = this.insertUserDoc(options, newUser);\n    // Perform another check after insert, in case a matching user has been\n    // inserted in the meantime\n    try {\n      this._checkForCaseInsensitiveDuplicates('username', 'Username', username, userId);\n      this._checkForCaseInsensitiveDuplicates('emails.address', 'Email', email, userId);\n    } catch (ex) {\n      // Remove inserted user if the check fails\n      Meteor.users.remove(userId);\n      throw ex;\n    }\n    return userId;\n  }\n\n  _handleError = (msg, throwError = true, errorCode = 403) => {\n    const error = new Meteor.Error(\n      errorCode,\n      this._options.ambiguousErrorMessages\n        ? \"Something went wrong. Please check your credentials.\"\n        : msg\n    );\n    if (throwError) {\n      throw error;\n    }\n    return error;\n  }\n\n  _userQueryValidator = Match.Where(user => {\n    check(user, {\n      id: Match.Optional(NonEmptyString),\n      username: Match.Optional(NonEmptyString),\n      email: Match.Optional(NonEmptyString)\n    });\n    if (Object.keys(user).length !== 1)\n      throw new Match.Error(\"User property must have exactly one field\");\n    return true;\n  });\n\n}\n\n// Give each login hook callback a fresh cloned copy of the attempt\n// object, but don't clone the connection.\n//\nconst cloneAttemptWithConnection = (connection, attempt) => {\n  const clonedAttempt = EJSON.clone(attempt);\n  clonedAttempt.connection = connection;\n  return clonedAttempt;\n};\n\nconst tryLoginMethod = (type, fn) => {\n  let result;\n  try {\n    result = fn();\n  }\n  catch (e) {\n    result = {error: e};\n  }\n\n  if (result && !result.type && type)\n    result.type = type;\n\n  return result;\n};\n\nconst setupDefaultLoginHandlers = accounts => {\n  accounts.registerLoginHandler(\"resume\", function (options) {\n    return defaultResumeLoginHandler.call(this, accounts, options);\n  });\n};\n\n// Login handler for resume tokens.\nconst defaultResumeLoginHandler = (accounts, options) => {\n  if (!options.resume)\n    return undefined;\n\n  check(options.resume, String);\n\n  const hashedToken = accounts._hashLoginToken(options.resume);\n\n  // First look for just the new-style hashed login token, to avoid\n  // sending the unhashed token to the database in a query if we don't\n  // need to.\n  let user = accounts.users.findOne(\n    {\"services.resume.loginTokens.hashedToken\": hashedToken},\n    {fields: {\"services.resume.loginTokens.$\": 1}});\n\n  if (! user) {\n    // If we didn't find the hashed login token, try also looking for\n    // the old-style unhashed token.  But we need to look for either\n    // the old-style token OR the new-style token, because another\n    // client connection logging in simultaneously might have already\n    // converted the token.\n    user = accounts.users.findOne({\n        $or: [\n          {\"services.resume.loginTokens.hashedToken\": hashedToken},\n          {\"services.resume.loginTokens.token\": options.resume}\n        ]\n      },\n      // Note: Cannot use ...loginTokens.$ positional operator with $or query.\n      {fields: {\"services.resume.loginTokens\": 1}});\n  }\n\n  if (! user)\n    return {\n      error: new Meteor.Error(403, \"You've been logged out by the server. Please log in again.\")\n    };\n\n  // Find the token, which will either be an object with fields\n  // {hashedToken, when} for a hashed token or {token, when} for an\n  // unhashed token.\n  let oldUnhashedStyleToken;\n  let token = user.services.resume.loginTokens.find(token =>\n    token.hashedToken === hashedToken\n  );\n  if (token) {\n    oldUnhashedStyleToken = false;\n  } else {\n    token = user.services.resume.loginTokens.find(token =>\n      token.token === options.resume\n    );\n    oldUnhashedStyleToken = true;\n  }\n\n  const tokenExpires = accounts._tokenExpiration(token.when);\n  if (new Date() >= tokenExpires)\n    return {\n      userId: user._id,\n      error: new Meteor.Error(403, \"Your session has expired. Please log in again.\")\n    };\n\n  // Update to a hashed token when an unhashed token is encountered.\n  if (oldUnhashedStyleToken) {\n    // Only add the new hashed token if the old unhashed token still\n    // exists (this avoids resurrecting the token if it was deleted\n    // after we read it).  Using $addToSet avoids getting an index\n    // error if another client logging in simultaneously has already\n    // inserted the new hashed token.\n    accounts.users.update(\n      {\n        _id: user._id,\n        \"services.resume.loginTokens.token\": options.resume\n      },\n      {$addToSet: {\n          \"services.resume.loginTokens\": {\n            \"hashedToken\": hashedToken,\n            \"when\": token.when\n          }\n        }}\n    );\n\n    // Remove the old token *after* adding the new, since otherwise\n    // another client trying to login between our removing the old and\n    // adding the new wouldn't find a token to login with.\n    accounts.users.update(user._id, {\n      $pull: {\n        \"services.resume.loginTokens\": { \"token\": options.resume }\n      }\n    });\n  }\n\n  return {\n    userId: user._id,\n    stampedLoginToken: {\n      token: options.resume,\n      when: token.when\n    }\n  };\n};\n\nconst expirePasswordToken = (\n  accounts,\n  oldestValidDate,\n  tokenFilter,\n  userId\n) => {\n  // boolean value used to determine if this method was called from enroll account workflow\n  let isEnroll = false;\n  const userFilter = userId ? {_id: userId} : {};\n  // check if this method was called from enroll account workflow\n  if(tokenFilter['services.password.enroll.reason']) {\n    isEnroll = true;\n  }\n  let resetRangeOr = {\n    $or: [\n      { \"services.password.reset.when\": { $lt: oldestValidDate } },\n      { \"services.password.reset.when\": { $lt: +oldestValidDate } }\n    ]\n  };\n  if(isEnroll) {\n    resetRangeOr = {\n      $or: [\n        { \"services.password.enroll.when\": { $lt: oldestValidDate } },\n        { \"services.password.enroll.when\": { $lt: +oldestValidDate } }\n      ]\n    };\n  }\n  const expireFilter = { $and: [tokenFilter, resetRangeOr] };\n  if(isEnroll) {\n    accounts.users.update({...userFilter, ...expireFilter}, {\n      $unset: {\n        \"services.password.enroll\": \"\"\n      }\n    }, { multi: true });\n  } else {\n    accounts.users.update({...userFilter, ...expireFilter}, {\n      $unset: {\n        \"services.password.reset\": \"\"\n      }\n    }, { multi: true });\n  }\n\n};\n\nconst setExpireTokensInterval = accounts => {\n  accounts.expireTokenInterval = Meteor.setInterval(() => {\n    accounts._expireTokens();\n    accounts._expirePasswordResetTokens();\n    accounts._expirePasswordEnrollTokens();\n  }, EXPIRE_TOKENS_INTERVAL_MS);\n};\n\n///\n/// OAuth Encryption Support\n///\n\nconst OAuthEncryption =\n  Package[\"oauth-encryption\"] &&\n  Package[\"oauth-encryption\"].OAuthEncryption;\n\nconst usingOAuthEncryption = () => {\n  return OAuthEncryption && OAuthEncryption.keyIsLoaded();\n};\n\n// OAuth service data is temporarily stored in the pending credentials\n// collection during the oauth authentication process.  Sensitive data\n// such as access tokens are encrypted without the user id because\n// we don't know the user id yet.  We re-encrypt these fields with the\n// user id included when storing the service data permanently in\n// the users collection.\n//\nconst pinEncryptedFieldsToUser = (serviceData, userId) => {\n  Object.keys(serviceData).forEach(key => {\n    let value = serviceData[key];\n    if (OAuthEncryption && OAuthEncryption.isSealed(value))\n      value = OAuthEncryption.seal(OAuthEncryption.open(value), userId);\n    serviceData[key] = value;\n  });\n};\n\n\n// Encrypt unencrypted login service secrets when oauth-encryption is\n// added.\n//\n// XXX For the oauthSecretKey to be available here at startup, the\n// developer must call Accounts.config({oauthSecretKey: ...}) at load\n// time, instead of in a Meteor.startup block, because the startup\n// block in the app code will run after this accounts-base startup\n// block.  Perhaps we need a post-startup callback?\n\nMeteor.startup(() => {\n  if (! usingOAuthEncryption()) {\n    return;\n  }\n\n  const { ServiceConfiguration } = Package['service-configuration'];\n\n  ServiceConfiguration.configurations.find({\n    $and: [{\n      secret: { $exists: true }\n    }, {\n      \"secret.algorithm\": { $exists: false }\n    }]\n  }).forEach(config => {\n    ServiceConfiguration.configurations.update(config._id, {\n      $set: {\n        secret: OAuthEncryption.seal(config.secret)\n      }\n    });\n  });\n});\n\n// XXX see comment on Accounts.createUser in passwords_server about adding a\n// second \"server options\" argument.\nconst defaultCreateUserHook = (options, user) => {\n  if (options.profile)\n    user.profile = options.profile;\n  return user;\n};\n\n// Validate new user's email or Google/Facebook/GitHub account's email\nfunction defaultValidateNewUserHook(user) {\n  const domain = this._options.restrictCreationByEmailDomain;\n  if (!domain) {\n    return true;\n  }\n\n  let emailIsGood = false;\n  if (user.emails && user.emails.length > 0) {\n    emailIsGood = user.emails.reduce(\n      (prev, email) => prev || this._testEmailDomain(email.address), false\n    );\n  } else if (user.services && Object.values(user.services).length > 0) {\n    // Find any email of any service and check it\n    emailIsGood = Object.values(user.services).reduce(\n      (prev, service) => service.email && this._testEmailDomain(service.email),\n      false,\n    );\n  }\n\n  if (emailIsGood) {\n    return true;\n  }\n\n  if (typeof domain === 'string') {\n    throw new Meteor.Error(403, `@${domain} email required`);\n  } else {\n    throw new Meteor.Error(403, \"Email doesn't match the criteria.\");\n  }\n}\n\nconst setupUsersCollection = users => {\n  ///\n  /// RESTRICTING WRITES TO USER OBJECTS\n  ///\n  users.allow({\n    // clients can modify the profile field of their own document, and\n    // nothing else.\n    update: (userId, user, fields, modifier) => {\n      // make sure it is our record\n      if (user._id !== userId) {\n        return false;\n      }\n\n      // user can only modify the 'profile' field. sets to multiple\n      // sub-keys (eg profile.foo and profile.bar) are merged into entry\n      // in the fields list.\n      if (fields.length !== 1 || fields[0] !== 'profile') {\n        return false;\n      }\n\n      return true;\n    },\n    fetch: ['_id'] // we only look at _id.\n  });\n\n  /// DEFAULT INDEXES ON USERS\n  users.createIndex('username', { unique: true, sparse: true });\n  users.createIndex('emails.address', { unique: true, sparse: true });\n  users.createIndex('services.resume.loginTokens.hashedToken',\n    { unique: true, sparse: true });\n  users.createIndex('services.resume.loginTokens.token',\n    { unique: true, sparse: true });\n  // For taking care of logoutOtherClients calls that crashed before the\n  // tokens were deleted.\n  users.createIndex('services.resume.haveLoginTokensToDelete',\n    { sparse: true });\n  // For expiring login tokens\n  users.createIndex(\"services.resume.loginTokens.when\", { sparse: true });\n  // For expiring password tokens\n  users.createIndex('services.password.reset.when', { sparse: true });\n  users.createIndex('services.password.enroll.when', { sparse: true });\n};\n\n\n// Generates permutations of all case variations of a given string.\nconst generateCasePermutationsForString = string => {\n  let permutations = [''];\n  for (let i = 0; i < string.length; i++) {\n    const ch = string.charAt(i);\n    permutations = [].concat(...(permutations.map(prefix => {\n      const lowerCaseChar = ch.toLowerCase();\n      const upperCaseChar = ch.toUpperCase();\n      // Don't add unnecessary permutations when ch is not a letter\n      if (lowerCaseChar === upperCaseChar) {\n        return [prefix + ch];\n      } else {\n        return [prefix + lowerCaseChar, prefix + upperCaseChar];\n      }\n    })));\n  }\n  return permutations;\n}\n\n"]},"sourceType":"module","externalDependencies":{},"hash":"8afbc07ad3612524ab615ab98109be0c1aabd2df"}
