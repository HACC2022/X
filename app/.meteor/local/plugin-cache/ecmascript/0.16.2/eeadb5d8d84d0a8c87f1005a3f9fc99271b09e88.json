{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"C:\\Users\\zianz\\OneDrive\\Documents\\GitHub\\X\\app\\packages\\accounts-password\\password_server.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.windows.x86_64"},"sourceFileName":"packages/accounts-password/password_server.js","filename":"C:\\Users\\zianz\\OneDrive\\Documents\\GitHub\\X\\app\\packages\\accounts-password\\password_server.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"C:\\Users\\zianz\\OneDrive\\Documents\\GitHub\\X\\app","root":"C:\\Users\\zianz\\OneDrive\\Documents\\GitHub\\X\\app","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"C:\\Users\\zianz\\OneDrive\\Documents\\GitHub\\X\\app\\packages\\accounts-password\\password_server.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/accounts-password/password_server.js"}},"code":"let _objectSpread;\n\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n\n}, 0);\nlet bcrypt;\nmodule.link(\"bcrypt\", {\n  default(v) {\n    bcrypt = v;\n  }\n\n}, 0);\nlet Accounts;\nmodule.link(\"meteor/accounts-base\", {\n  Accounts(v) {\n    Accounts = v;\n  }\n\n}, 1);\nconst bcryptHash = Meteor.wrapAsync(bcrypt.hash);\nconst bcryptCompare = Meteor.wrapAsync(bcrypt.compare); // Utility for grabbing user\n\nconst getUserById = (id, options) => Meteor.users.findOne(id, Accounts._addDefaultFieldSelector(options)); // User records have a 'services.password.bcrypt' field on them to hold\n// their hashed passwords.\n//\n// When the client sends a password to the server, it can either be a\n// string (the plaintext password) or an object with keys 'digest' and\n// 'algorithm' (must be \"sha-256\" for now). The Meteor client always sends\n// password objects { digest: *, algorithm: \"sha-256\" }, but DDP clients\n// that don't have access to SHA can just send plaintext passwords as\n// strings.\n//\n// When the server receives a plaintext password as a string, it always\n// hashes it with SHA256 before passing it into bcrypt. When the server\n// receives a password as an object, it asserts that the algorithm is\n// \"sha-256\" and then passes the digest to bcrypt.\n\n\nAccounts._bcryptRounds = () => Accounts._options.bcryptRounds || 10; // Given a 'password' from the client, extract the string that we should\n// bcrypt. 'password' can be one of:\n//  - String (the plaintext password)\n//  - Object with 'digest' and 'algorithm' keys. 'algorithm' must be \"sha-256\".\n//\n\n\nconst getPasswordString = password => {\n  if (typeof password === \"string\") {\n    password = SHA256(password);\n  } else {\n    // 'password' is an object\n    if (password.algorithm !== \"sha-256\") {\n      throw new Error(\"Invalid password hash algorithm. \" + \"Only 'sha-256' is allowed.\");\n    }\n\n    password = password.digest;\n  }\n\n  return password;\n}; // Use bcrypt to hash the password for storage in the database.\n// `password` can be a string (in which case it will be run through\n// SHA256 before bcrypt) or an object with properties `digest` and\n// `algorithm` (in which case we bcrypt `password.digest`).\n//\n\n\nconst hashPassword = password => {\n  password = getPasswordString(password);\n  return bcryptHash(password, Accounts._bcryptRounds());\n}; // Extract the number of rounds used in the specified bcrypt hash.\n\n\nconst getRoundsFromBcryptHash = hash => {\n  let rounds;\n\n  if (hash) {\n    const hashSegments = hash.split('$');\n\n    if (hashSegments.length > 2) {\n      rounds = parseInt(hashSegments[2], 10);\n    }\n  }\n\n  return rounds;\n}; // Check whether the provided password matches the bcrypt'ed password in\n// the database user record. `password` can be a string (in which case\n// it will be run through SHA256 before bcrypt) or an object with\n// properties `digest` and `algorithm` (in which case we bcrypt\n// `password.digest`).\n//\n// The user parameter needs at least user._id and user.services\n\n\nAccounts._checkPasswordUserFields = {\n  _id: 1,\n  services: 1\n}; //\n\nAccounts._checkPassword = (user, password) => {\n  const result = {\n    userId: user._id\n  };\n  const formattedPassword = getPasswordString(password);\n  const hash = user.services.password.bcrypt;\n  const hashRounds = getRoundsFromBcryptHash(hash);\n\n  if (!bcryptCompare(formattedPassword, hash)) {\n    result.error = Accounts._handleError(\"Incorrect password\", false);\n  } else if (hash && Accounts._bcryptRounds() != hashRounds) {\n    // The password checks out, but the user's bcrypt hash needs to be updated.\n    Meteor.defer(() => {\n      Meteor.users.update({\n        _id: user._id\n      }, {\n        $set: {\n          'services.password.bcrypt': bcryptHash(formattedPassword, Accounts._bcryptRounds())\n        }\n      });\n    });\n  }\n\n  return result;\n};\n\nconst checkPassword = Accounts._checkPassword; ///\n/// LOGIN\n///\n\n/**\n * @summary Finds the user with the specified username.\n * First tries to match username case sensitively; if that fails, it\n * tries case insensitively; but if more than one user matches the case\n * insensitive search, it returns null.\n * @locus Server\n * @param {String} username The username to look for\n * @param {Object} [options]\n * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.\n * @returns {Object} A user if found, else null\n * @importFromPackage accounts-base\n */\n\nAccounts.findUserByUsername = (username, options) => Accounts._findUserByQuery({\n  username\n}, options);\n/**\n * @summary Finds the user with the specified email.\n * First tries to match email case sensitively; if that fails, it\n * tries case insensitively; but if more than one user matches the case\n * insensitive search, it returns null.\n * @locus Server\n * @param {String} email The email address to look for\n * @param {Object} [options]\n * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.\n * @returns {Object} A user if found, else null\n * @importFromPackage accounts-base\n */\n\n\nAccounts.findUserByEmail = (email, options) => Accounts._findUserByQuery({\n  email\n}, options); // XXX maybe this belongs in the check package\n\n\nconst NonEmptyString = Match.Where(x => {\n  check(x, String);\n  return x.length > 0;\n});\nconst passwordValidator = Match.OneOf(Match.Where(str => {\n  var _Meteor$settings, _Meteor$settings$pack, _Meteor$settings$pack2;\n\n  return Match.test(str, String) && str.length <= ((_Meteor$settings = Meteor.settings) === null || _Meteor$settings === void 0 ? void 0 : (_Meteor$settings$pack = _Meteor$settings.packages) === null || _Meteor$settings$pack === void 0 ? void 0 : (_Meteor$settings$pack2 = _Meteor$settings$pack.accounts) === null || _Meteor$settings$pack2 === void 0 ? void 0 : _Meteor$settings$pack2.passwordMaxLength) || 256;\n}), {\n  digest: Match.Where(str => Match.test(str, String) && str.length === 64),\n  algorithm: Match.OneOf('sha-256')\n}); // Handler to login with a password.\n//\n// The Meteor client sets options.password to an object with keys\n// 'digest' (set to SHA256(password)) and 'algorithm' (\"sha-256\").\n//\n// For other DDP clients which don't have access to SHA, the handler\n// also accepts the plaintext password in options.password as a string.\n//\n// (It might be nice if servers could turn the plaintext password\n// option off. Or maybe it should be opt-in, not opt-out?\n// Accounts.config option?)\n//\n// Note that neither password option is secure without SSL.\n//\n\nAccounts.registerLoginHandler(\"password\", options => {\n  var _Accounts$_check2faEn, _Accounts;\n\n  if (!options.password) return undefined; // don't handle\n\n  check(options, {\n    user: Accounts._userQueryValidator,\n    password: passwordValidator,\n    code: Match.Optional(NonEmptyString)\n  });\n\n  const user = Accounts._findUserByQuery(options.user, {\n    fields: _objectSpread({\n      services: 1\n    }, Accounts._checkPasswordUserFields)\n  });\n\n  if (!user) {\n    Accounts._handleError(\"User not found\");\n  }\n\n  if (!user.services || !user.services.password || !user.services.password.bcrypt) {\n    Accounts._handleError(\"User has no password set\");\n  }\n\n  const result = checkPassword(user, options.password); // This method is added by the package accounts-2fa\n  // First the login is validated, then the code situation is checked\n\n  if (!result.error && (_Accounts$_check2faEn = (_Accounts = Accounts)._check2faEnabled) !== null && _Accounts$_check2faEn !== void 0 && _Accounts$_check2faEn.call(_Accounts, user)) {\n    if (!options.code) {\n      Accounts._handleError('2FA code must be informed', true, 'no-2fa-code');\n    }\n\n    if (!Accounts._isTokenValid(user.services.twoFactorAuthentication.secret, options.code)) {\n      Accounts._handleError('Invalid 2FA code', true, 'invalid-2fa-code');\n    }\n  }\n\n  return result;\n}); ///\n/// CHANGING\n///\n\n/**\n * @summary Change a user's username. Use this instead of updating the\n * database directly. The operation will fail if there is an existing user\n * with a username only differing in case.\n * @locus Server\n * @param {String} userId The ID of the user to update.\n * @param {String} newUsername A new username for the user.\n * @importFromPackage accounts-base\n */\n\nAccounts.setUsername = (userId, newUsername) => {\n  check(userId, NonEmptyString);\n  check(newUsername, NonEmptyString);\n  const user = getUserById(userId, {\n    fields: {\n      username: 1\n    }\n  });\n\n  if (!user) {\n    Accounts._handleError(\"User not found\");\n  }\n\n  const oldUsername = user.username; // Perform a case insensitive check for duplicates before update\n\n  Accounts._checkForCaseInsensitiveDuplicates('username', 'Username', newUsername, user._id);\n\n  Meteor.users.update({\n    _id: user._id\n  }, {\n    $set: {\n      username: newUsername\n    }\n  }); // Perform another check after update, in case a matching user has been\n  // inserted in the meantime\n\n  try {\n    Accounts._checkForCaseInsensitiveDuplicates('username', 'Username', newUsername, user._id);\n  } catch (ex) {\n    // Undo update if the check fails\n    Meteor.users.update({\n      _id: user._id\n    }, {\n      $set: {\n        username: oldUsername\n      }\n    });\n    throw ex;\n  }\n}; // Let the user change their own password if they know the old\n// password. `oldPassword` and `newPassword` should be objects with keys\n// `digest` and `algorithm` (representing the SHA256 of the password).\n\n\nMeteor.methods({\n  changePassword: function (oldPassword, newPassword) {\n    check(oldPassword, passwordValidator);\n    check(newPassword, passwordValidator);\n\n    if (!this.userId) {\n      throw new Meteor.Error(401, \"Must be logged in\");\n    }\n\n    const user = getUserById(this.userId, {\n      fields: _objectSpread({\n        services: 1\n      }, Accounts._checkPasswordUserFields)\n    });\n\n    if (!user) {\n      Accounts._handleError(\"User not found\");\n    }\n\n    if (!user.services || !user.services.password || !user.services.password.bcrypt) {\n      Accounts._handleError(\"User has no password set\");\n    }\n\n    const result = checkPassword(user, oldPassword);\n\n    if (result.error) {\n      throw result.error;\n    }\n\n    const hashed = hashPassword(newPassword); // It would be better if this removed ALL existing tokens and replaced\n    // the token for the current connection with a new one, but that would\n    // be tricky, so we'll settle for just replacing all tokens other than\n    // the one for the current connection.\n\n    const currentToken = Accounts._getLoginToken(this.connection.id);\n\n    Meteor.users.update({\n      _id: this.userId\n    }, {\n      $set: {\n        'services.password.bcrypt': hashed\n      },\n      $pull: {\n        'services.resume.loginTokens': {\n          hashedToken: {\n            $ne: currentToken\n          }\n        }\n      },\n      $unset: {\n        'services.password.reset': 1\n      }\n    });\n    return {\n      passwordChanged: true\n    };\n  }\n}); // Force change the users password.\n\n/**\n * @summary Forcibly change the password for a user.\n * @locus Server\n * @param {String} userId The id of the user to update.\n * @param {String} newPassword A new password for the user.\n * @param {Object} [options]\n * @param {Object} options.logout Logout all current connections with this userId (default: true)\n * @importFromPackage accounts-base\n */\n\nAccounts.setPassword = (userId, newPlaintextPassword, options) => {\n  check(userId, String);\n  check(newPlaintextPassword, Match.Where(str => {\n    var _Meteor$settings2, _Meteor$settings2$pac, _Meteor$settings2$pac2;\n\n    return Match.test(str, String) && str.length <= ((_Meteor$settings2 = Meteor.settings) === null || _Meteor$settings2 === void 0 ? void 0 : (_Meteor$settings2$pac = _Meteor$settings2.packages) === null || _Meteor$settings2$pac === void 0 ? void 0 : (_Meteor$settings2$pac2 = _Meteor$settings2$pac.accounts) === null || _Meteor$settings2$pac2 === void 0 ? void 0 : _Meteor$settings2$pac2.passwordMaxLength) || 256;\n  }));\n  check(options, Match.Maybe({\n    logout: Boolean\n  }));\n  options = _objectSpread({\n    logout: true\n  }, options);\n  const user = getUserById(userId, {\n    fields: {\n      _id: 1\n    }\n  });\n\n  if (!user) {\n    throw new Meteor.Error(403, \"User not found\");\n  }\n\n  const update = {\n    $unset: {\n      'services.password.reset': 1\n    },\n    $set: {\n      'services.password.bcrypt': hashPassword(newPlaintextPassword)\n    }\n  };\n\n  if (options.logout) {\n    update.$unset['services.resume.loginTokens'] = 1;\n  }\n\n  Meteor.users.update({\n    _id: user._id\n  }, update);\n}; ///\n/// RESETTING VIA EMAIL\n///\n// Utility for plucking addresses from emails\n\n\nconst pluckAddresses = function () {\n  let emails = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  return emails.map(email => email.address);\n}; // Method called by a user to request a password reset email. This is\n// the start of the reset process.\n\n\nMeteor.methods({\n  forgotPassword: options => {\n    check(options, {\n      email: String\n    });\n    const user = Accounts.findUserByEmail(options.email, {\n      fields: {\n        emails: 1\n      }\n    });\n\n    if (!user) {\n      Accounts._handleError(\"User not found\");\n    }\n\n    const emails = pluckAddresses(user.emails);\n    const caseSensitiveEmail = emails.find(email => email.toLowerCase() === options.email.toLowerCase());\n    Accounts.sendResetPasswordEmail(user._id, caseSensitiveEmail);\n  }\n});\n/**\n * @summary Generates a reset token and saves it into the database.\n * @locus Server\n * @param {String} userId The id of the user to generate the reset token for.\n * @param {String} email Which address of the user to generate the reset token for. This address must be in the user's `emails` list. If `null`, defaults to the first email in the list.\n * @param {String} reason `resetPassword` or `enrollAccount`.\n * @param {Object} [extraTokenData] Optional additional data to be added into the token record.\n * @returns {Object} Object with {email, user, token} values.\n * @importFromPackage accounts-base\n */\n\nAccounts.generateResetToken = (userId, email, reason, extraTokenData) => {\n  // Make sure the user exists, and email is one of their addresses.\n  // Don't limit the fields in the user object since the user is returned\n  // by the function and some other fields might be used elsewhere.\n  const user = getUserById(userId);\n\n  if (!user) {\n    Accounts._handleError(\"Can't find user\");\n  } // pick the first email if we weren't passed an email.\n\n\n  if (!email && user.emails && user.emails[0]) {\n    email = user.emails[0].address;\n  } // make sure we have a valid email\n\n\n  if (!email || !pluckAddresses(user.emails).includes(email)) {\n    Accounts._handleError(\"No such email for user.\");\n  }\n\n  const token = Random.secret();\n  const tokenRecord = {\n    token,\n    email,\n    when: new Date()\n  };\n\n  if (reason === 'resetPassword') {\n    tokenRecord.reason = 'reset';\n  } else if (reason === 'enrollAccount') {\n    tokenRecord.reason = 'enroll';\n  } else if (reason) {\n    // fallback so that this function can be used for unknown reasons as well\n    tokenRecord.reason = reason;\n  }\n\n  if (extraTokenData) {\n    Object.assign(tokenRecord, extraTokenData);\n  } // if this method is called from the enroll account work-flow then\n  // store the token record in 'services.password.enroll' db field\n  // else store the token record in in 'services.password.reset' db field\n\n\n  if (reason === 'enrollAccount') {\n    Meteor.users.update({\n      _id: user._id\n    }, {\n      $set: {\n        'services.password.enroll': tokenRecord\n      }\n    }); // before passing to template, update user object with new token\n\n    Meteor._ensure(user, 'services', 'password').enroll = tokenRecord;\n  } else {\n    Meteor.users.update({\n      _id: user._id\n    }, {\n      $set: {\n        'services.password.reset': tokenRecord\n      }\n    }); // before passing to template, update user object with new token\n\n    Meteor._ensure(user, 'services', 'password').reset = tokenRecord;\n  }\n\n  return {\n    email,\n    user,\n    token\n  };\n};\n/**\n * @summary Generates an e-mail verification token and saves it into the database.\n * @locus Server\n * @param {String} userId The id of the user to generate the  e-mail verification token for.\n * @param {String} email Which address of the user to generate the e-mail verification token for. This address must be in the user's `emails` list. If `null`, defaults to the first unverified email in the list.\n * @param {Object} [extraTokenData] Optional additional data to be added into the token record.\n * @returns {Object} Object with {email, user, token} values.\n * @importFromPackage accounts-base\n */\n\n\nAccounts.generateVerificationToken = (userId, email, extraTokenData) => {\n  // Make sure the user exists, and email is one of their addresses.\n  // Don't limit the fields in the user object since the user is returned\n  // by the function and some other fields might be used elsewhere.\n  const user = getUserById(userId);\n\n  if (!user) {\n    Accounts._handleError(\"Can't find user\");\n  } // pick the first unverified email if we weren't passed an email.\n\n\n  if (!email) {\n    const emailRecord = (user.emails || []).find(e => !e.verified);\n    email = (emailRecord || {}).address;\n\n    if (!email) {\n      Accounts._handleError(\"That user has no unverified email addresses.\");\n    }\n  } // make sure we have a valid email\n\n\n  if (!email || !pluckAddresses(user.emails).includes(email)) {\n    Accounts._handleError(\"No such email for user.\");\n  }\n\n  const token = Random.secret();\n  const tokenRecord = {\n    token,\n    // TODO: This should probably be renamed to \"email\" to match reset token record.\n    address: email,\n    when: new Date()\n  };\n\n  if (extraTokenData) {\n    Object.assign(tokenRecord, extraTokenData);\n  }\n\n  Meteor.users.update({\n    _id: user._id\n  }, {\n    $push: {\n      'services.email.verificationTokens': tokenRecord\n    }\n  }); // before passing to template, update user object with new token\n\n  Meteor._ensure(user, 'services', 'email');\n\n  if (!user.services.email.verificationTokens) {\n    user.services.email.verificationTokens = [];\n  }\n\n  user.services.email.verificationTokens.push(tokenRecord);\n  return {\n    email,\n    user,\n    token\n  };\n}; // send the user an email with a link that when opened allows the user\n// to set a new password, without the old password.\n\n/**\n * @summary Send an email with a link the user can use to reset their password.\n * @locus Server\n * @param {String} userId The id of the user to send email to.\n * @param {String} [email] Optional. Which address of the user's to send the email to. This address must be in the user's `emails` list. Defaults to the first email in the list.\n * @param {Object} [extraTokenData] Optional additional data to be added into the token record.\n * @param {Object} [extraParams] Optional additional params to be added to the reset url.\n * @returns {Object} Object with {email, user, token, url, options} values.\n * @importFromPackage accounts-base\n */\n\n\nAccounts.sendResetPasswordEmail = (userId, email, extraTokenData, extraParams) => {\n  const {\n    email: realEmail,\n    user,\n    token\n  } = Accounts.generateResetToken(userId, email, 'resetPassword', extraTokenData);\n  const url = Accounts.urls.resetPassword(token, extraParams);\n  const options = Accounts.generateOptionsForEmail(realEmail, user, url, 'resetPassword');\n  Email.send(options);\n\n  if (Meteor.isDevelopment) {\n    console.log(\"\\nReset password URL: \".concat(url));\n  }\n\n  return {\n    email: realEmail,\n    user,\n    token,\n    url,\n    options\n  };\n}; // send the user an email informing them that their account was created, with\n// a link that when opened both marks their email as verified and forces them\n// to choose their password. The email must be one of the addresses in the\n// user's emails field, or undefined to pick the first email automatically.\n//\n// This is not called automatically. It must be called manually if you\n// want to use enrollment emails.\n\n/**\n * @summary Send an email with a link the user can use to set their initial password.\n * @locus Server\n * @param {String} userId The id of the user to send email to.\n * @param {String} [email] Optional. Which address of the user's to send the email to. This address must be in the user's `emails` list. Defaults to the first email in the list.\n * @param {Object} [extraTokenData] Optional additional data to be added into the token record.\n * @param {Object} [extraParams] Optional additional params to be added to the enrollment url.\n * @returns {Object} Object with {email, user, token, url, options} values.\n * @importFromPackage accounts-base\n */\n\n\nAccounts.sendEnrollmentEmail = (userId, email, extraTokenData, extraParams) => {\n  const {\n    email: realEmail,\n    user,\n    token\n  } = Accounts.generateResetToken(userId, email, 'enrollAccount', extraTokenData);\n  const url = Accounts.urls.enrollAccount(token, extraParams);\n  const options = Accounts.generateOptionsForEmail(realEmail, user, url, 'enrollAccount');\n  Email.send(options);\n\n  if (Meteor.isDevelopment) {\n    console.log(\"\\nEnrollment email URL: \".concat(url));\n  }\n\n  return {\n    email: realEmail,\n    user,\n    token,\n    url,\n    options\n  };\n}; // Take token from sendResetPasswordEmail or sendEnrollmentEmail, change\n// the users password, and log them in.\n\n\nMeteor.methods({\n  resetPassword: function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    const token = args[0];\n    const newPassword = args[1];\n    return Accounts._loginMethod(this, \"resetPassword\", args, \"password\", () => {\n      check(token, String);\n      check(newPassword, passwordValidator);\n      let user = Meteor.users.findOne({\n        \"services.password.reset.token\": token\n      }, {\n        fields: {\n          services: 1,\n          emails: 1\n        }\n      });\n      let isEnroll = false; // if token is in services.password.reset db field implies\n      // this method is was not called from enroll account workflow\n      // else this method is called from enroll account workflow\n\n      if (!user) {\n        user = Meteor.users.findOne({\n          \"services.password.enroll.token\": token\n        }, {\n          fields: {\n            services: 1,\n            emails: 1\n          }\n        });\n        isEnroll = true;\n      }\n\n      if (!user) {\n        throw new Meteor.Error(403, \"Token expired\");\n      }\n\n      let tokenRecord = {};\n\n      if (isEnroll) {\n        tokenRecord = user.services.password.enroll;\n      } else {\n        tokenRecord = user.services.password.reset;\n      }\n\n      const {\n        when,\n        email\n      } = tokenRecord;\n\n      let tokenLifetimeMs = Accounts._getPasswordResetTokenLifetimeMs();\n\n      if (isEnroll) {\n        tokenLifetimeMs = Accounts._getPasswordEnrollTokenLifetimeMs();\n      }\n\n      const currentTimeMs = Date.now();\n      if (currentTimeMs - when > tokenLifetimeMs) throw new Meteor.Error(403, \"Token expired\");\n      if (!pluckAddresses(user.emails).includes(email)) return {\n        userId: user._id,\n        error: new Meteor.Error(403, \"Token has invalid email address\")\n      };\n      const hashed = hashPassword(newPassword); // NOTE: We're about to invalidate tokens on the user, who we might be\n      // logged in as. Make sure to avoid logging ourselves out if this\n      // happens. But also make sure not to leave the connection in a state\n      // of having a bad token set if things fail.\n\n      const oldToken = Accounts._getLoginToken(this.connection.id);\n\n      Accounts._setLoginToken(user._id, this.connection, null);\n\n      const resetToOldToken = () => Accounts._setLoginToken(user._id, this.connection, oldToken);\n\n      try {\n        // Update the user record by:\n        // - Changing the password to the new one\n        // - Forgetting about the reset token or enroll token that was just used\n        // - Verifying their email, since they got the password reset via email.\n        let affectedRecords = {}; // if reason is enroll then check services.password.enroll.token field for affected records\n\n        if (isEnroll) {\n          affectedRecords = Meteor.users.update({\n            _id: user._id,\n            'emails.address': email,\n            'services.password.enroll.token': token\n          }, {\n            $set: {\n              'services.password.bcrypt': hashed,\n              'emails.$.verified': true\n            },\n            $unset: {\n              'services.password.enroll': 1\n            }\n          });\n        } else {\n          affectedRecords = Meteor.users.update({\n            _id: user._id,\n            'emails.address': email,\n            'services.password.reset.token': token\n          }, {\n            $set: {\n              'services.password.bcrypt': hashed,\n              'emails.$.verified': true\n            },\n            $unset: {\n              'services.password.reset': 1\n            }\n          });\n        }\n\n        if (affectedRecords !== 1) return {\n          userId: user._id,\n          error: new Meteor.Error(403, \"Invalid email\")\n        };\n      } catch (err) {\n        resetToOldToken();\n        throw err;\n      } // Replace all valid login tokens with new ones (changing\n      // password should invalidate existing sessions).\n\n\n      Accounts._clearAllLoginTokens(user._id);\n\n      return {\n        userId: user._id\n      };\n    });\n  }\n}); ///\n/// EMAIL VERIFICATION\n///\n// send the user an email with a link that when opened marks that\n// address as verified\n\n/**\n * @summary Send an email with a link the user can use verify their email address.\n * @locus Server\n * @param {String} userId The id of the user to send email to.\n * @param {String} [email] Optional. Which address of the user's to send the email to. This address must be in the user's `emails` list. Defaults to the first unverified email in the list.\n * @param {Object} [extraTokenData] Optional additional data to be added into the token record.\n * @param {Object} [extraParams] Optional additional params to be added to the verification url.\n *\n * @returns {Object} Object with {email, user, token, url, options} values.\n * @importFromPackage accounts-base\n */\n\nAccounts.sendVerificationEmail = (userId, email, extraTokenData, extraParams) => {\n  // XXX Also generate a link using which someone can delete this\n  // account if they own said address but weren't those who created\n  // this account.\n  const {\n    email: realEmail,\n    user,\n    token\n  } = Accounts.generateVerificationToken(userId, email, extraTokenData);\n  const url = Accounts.urls.verifyEmail(token, extraParams);\n  const options = Accounts.generateOptionsForEmail(realEmail, user, url, 'verifyEmail');\n  Email.send(options);\n\n  if (Meteor.isDevelopment) {\n    console.log(\"\\nVerification email URL: \".concat(url));\n  }\n\n  return {\n    email: realEmail,\n    user,\n    token,\n    url,\n    options\n  };\n}; // Take token from sendVerificationEmail, mark the email as verified,\n// and log them in.\n\n\nMeteor.methods({\n  verifyEmail: function () {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    const token = args[0];\n    return Accounts._loginMethod(this, \"verifyEmail\", args, \"password\", () => {\n      check(token, String);\n      const user = Meteor.users.findOne({\n        'services.email.verificationTokens.token': token\n      }, {\n        fields: {\n          services: 1,\n          emails: 1\n        }\n      });\n      if (!user) throw new Meteor.Error(403, \"Verify email link expired\");\n      const tokenRecord = user.services.email.verificationTokens.find(t => t.token == token);\n      if (!tokenRecord) return {\n        userId: user._id,\n        error: new Meteor.Error(403, \"Verify email link expired\")\n      };\n      const emailsRecord = user.emails.find(e => e.address == tokenRecord.address);\n      if (!emailsRecord) return {\n        userId: user._id,\n        error: new Meteor.Error(403, \"Verify email link is for unknown address\")\n      }; // By including the address in the query, we can use 'emails.$' in the\n      // modifier to get a reference to the specific object in the emails\n      // array. See\n      // http://www.mongodb.org/display/DOCS/Updating/#Updating-The%24positionaloperator)\n      // http://www.mongodb.org/display/DOCS/Updating#Updating-%24pull\n\n      Meteor.users.update({\n        _id: user._id,\n        'emails.address': tokenRecord.address\n      }, {\n        $set: {\n          'emails.$.verified': true\n        },\n        $pull: {\n          'services.email.verificationTokens': {\n            address: tokenRecord.address\n          }\n        }\n      });\n      return {\n        userId: user._id\n      };\n    });\n  }\n});\n/**\n * @summary Add an email address for a user. Use this instead of directly\n * updating the database. The operation will fail if there is a different user\n * with an email only differing in case. If the specified user has an existing\n * email only differing in case however, we replace it.\n * @locus Server\n * @param {String} userId The ID of the user to update.\n * @param {String} newEmail A new email address for the user.\n * @param {Boolean} [verified] Optional - whether the new email address should\n * be marked as verified. Defaults to false.\n * @importFromPackage accounts-base\n */\n\nAccounts.addEmail = (userId, newEmail, verified) => {\n  check(userId, NonEmptyString);\n  check(newEmail, NonEmptyString);\n  check(verified, Match.Optional(Boolean));\n\n  if (verified === void 0) {\n    verified = false;\n  }\n\n  const user = getUserById(userId, {\n    fields: {\n      emails: 1\n    }\n  });\n  if (!user) throw new Meteor.Error(403, \"User not found\"); // Allow users to change their own email to a version with a different case\n  // We don't have to call checkForCaseInsensitiveDuplicates to do a case\n  // insensitive check across all emails in the database here because: (1) if\n  // there is no case-insensitive duplicate between this user and other users,\n  // then we are OK and (2) if this would create a conflict with other users\n  // then there would already be a case-insensitive duplicate and we can't fix\n  // that in this code anyway.\n\n  const caseInsensitiveRegExp = new RegExp(\"^\".concat(Meteor._escapeRegExp(newEmail), \"$\"), 'i');\n  const didUpdateOwnEmail = (user.emails || []).reduce((prev, email) => {\n    if (caseInsensitiveRegExp.test(email.address)) {\n      Meteor.users.update({\n        _id: user._id,\n        'emails.address': email.address\n      }, {\n        $set: {\n          'emails.$.address': newEmail,\n          'emails.$.verified': verified\n        }\n      });\n      return true;\n    } else {\n      return prev;\n    }\n  }, false); // In the other updates below, we have to do another call to\n  // checkForCaseInsensitiveDuplicates to make sure that no conflicting values\n  // were added to the database in the meantime. We don't have to do this for\n  // the case where the user is updating their email address to one that is the\n  // same as before, but only different because of capitalization. Read the\n  // big comment above to understand why.\n\n  if (didUpdateOwnEmail) {\n    return;\n  } // Perform a case insensitive check for duplicates before update\n\n\n  Accounts._checkForCaseInsensitiveDuplicates('emails.address', 'Email', newEmail, user._id);\n\n  Meteor.users.update({\n    _id: user._id\n  }, {\n    $addToSet: {\n      emails: {\n        address: newEmail,\n        verified: verified\n      }\n    }\n  }); // Perform another check after update, in case a matching user has been\n  // inserted in the meantime\n\n  try {\n    Accounts._checkForCaseInsensitiveDuplicates('emails.address', 'Email', newEmail, user._id);\n  } catch (ex) {\n    // Undo update if the check fails\n    Meteor.users.update({\n      _id: user._id\n    }, {\n      $pull: {\n        emails: {\n          address: newEmail\n        }\n      }\n    });\n    throw ex;\n  }\n};\n/**\n * @summary Remove an email address for a user. Use this instead of updating\n * the database directly.\n * @locus Server\n * @param {String} userId The ID of the user to update.\n * @param {String} email The email address to remove.\n * @importFromPackage accounts-base\n */\n\n\nAccounts.removeEmail = (userId, email) => {\n  check(userId, NonEmptyString);\n  check(email, NonEmptyString);\n  const user = getUserById(userId, {\n    fields: {\n      _id: 1\n    }\n  });\n  if (!user) throw new Meteor.Error(403, \"User not found\");\n  Meteor.users.update({\n    _id: user._id\n  }, {\n    $pull: {\n      emails: {\n        address: email\n      }\n    }\n  });\n}; ///\n/// CREATING USERS\n///\n// Shared createUser function called from the createUser method, both\n// if originates in client or server code. Calls user provided hooks,\n// does the actual user insertion.\n//\n// returns the user id\n\n\nconst createUser = options => {\n  // Unknown keys allowed, because a onCreateUserHook can take arbitrary\n  // options.\n  check(options, Match.ObjectIncluding({\n    username: Match.Optional(String),\n    email: Match.Optional(String),\n    password: Match.Optional(passwordValidator)\n  }));\n  const {\n    username,\n    email,\n    password\n  } = options;\n  if (!username && !email) throw new Meteor.Error(400, \"Need to set a username or email\");\n  const user = {\n    services: {}\n  };\n\n  if (password) {\n    const hashed = hashPassword(password);\n    user.services.password = {\n      bcrypt: hashed\n    };\n  }\n\n  return Accounts._createUserCheckingDuplicates({\n    user,\n    email,\n    username,\n    options\n  });\n}; // method for create user. Requests come from the client.\n\n\nMeteor.methods({\n  createUser: function () {\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n\n    const options = args[0];\n    return Accounts._loginMethod(this, \"createUser\", args, \"password\", () => {\n      // createUser() above does more checking.\n      check(options, Object);\n      if (Accounts._options.forbidClientAccountCreation) return {\n        error: new Meteor.Error(403, \"Signups forbidden\")\n      };\n      const userId = Accounts.createUserVerifyingEmail(options); // client gets logged in as the new user afterwards.\n\n      return {\n        userId: userId\n      };\n    });\n  }\n});\n/**\n * @summary Creates an user and sends an email if `options.email` is informed.\n * Then if the `sendVerificationEmail` option from the `Accounts` package is\n * enabled, you'll send a verification email if `options.password` is informed,\n * otherwise you'll send an enrollment email.\n * @locus Server\n * @param {Object} options The options object to be passed down when creating\n * the user\n * @param {String} options.username A unique name for this user.\n * @param {String} options.email The user's email address.\n * @param {String} options.password The user's password. This is __not__ sent in plain text over the wire.\n * @param {Object} options.profile The user's profile, typically including the `name` field.\n * @importFromPackage accounts-base\n * */\n\nAccounts.createUserVerifyingEmail = options => {\n  options = _objectSpread({}, options); // Create user. result contains id and token.\n\n  const userId = createUser(options); // safety belt. createUser is supposed to throw on error. send 500 error\n  // instead of sending a verification email with empty userid.\n\n  if (!userId) throw new Error(\"createUser failed to insert new user\"); // If `Accounts._options.sendVerificationEmail` is set, register\n  // a token to verify the user's primary email, and send it to\n  // that address.\n\n  if (options.email && Accounts._options.sendVerificationEmail) {\n    if (options.password) {\n      Accounts.sendVerificationEmail(userId, options.email);\n    } else {\n      Accounts.sendEnrollmentEmail(userId, options.email);\n    }\n  }\n\n  return userId;\n}; // Create user directly on the server.\n//\n// Unlike the client version, this does not log you in as this user\n// after creation.\n//\n// returns userId or throws an error if it can't create\n//\n// XXX add another argument (\"server options\") that gets sent to onCreateUser,\n// which is always empty when called from the createUser method? eg, \"admin:\n// true\", which we want to prevent the client from setting, but which a custom\n// method calling Accounts.createUser could set?\n//\n\n\nAccounts.createUser = (options, callback) => {\n  options = _objectSpread({}, options); // XXX allow an optional callback?\n\n  if (callback) {\n    throw new Error(\"Accounts.createUser with callback not supported on the server yet.\");\n  }\n\n  return createUser(options);\n}; ///\n/// PASSWORD-SPECIFIC INDEXES ON USERS\n///\n\n\nMeteor.users.createIndex('services.email.verificationTokens.token', {\n  unique: true,\n  sparse: true\n});\nMeteor.users.createIndex('services.password.reset.token', {\n  unique: true,\n  sparse: true\n});\nMeteor.users.createIndex('services.password.enroll.token', {\n  unique: true,\n  sparse: true\n});","map":{"version":3,"sources":["packages/accounts-password/password_server.js"],"names":["_objectSpread","module","link","default","v","bcrypt","Accounts","bcryptHash","Meteor","wrapAsync","hash","bcryptCompare","compare","getUserById","id","options","users","findOne","_addDefaultFieldSelector","_bcryptRounds","_options","bcryptRounds","getPasswordString","password","SHA256","algorithm","Error","digest","hashPassword","getRoundsFromBcryptHash","rounds","hashSegments","split","length","parseInt","_checkPasswordUserFields","_id","services","_checkPassword","user","result","userId","formattedPassword","hashRounds","error","_handleError","defer","update","$set","checkPassword","findUserByUsername","username","_findUserByQuery","findUserByEmail","email","NonEmptyString","Match","Where","x","check","String","passwordValidator","OneOf","str","test","settings","packages","accounts","passwordMaxLength","registerLoginHandler","undefined","_userQueryValidator","code","Optional","fields","_check2faEnabled","_isTokenValid","twoFactorAuthentication","secret","setUsername","newUsername","oldUsername","_checkForCaseInsensitiveDuplicates","ex","methods","changePassword","oldPassword","newPassword","hashed","currentToken","_getLoginToken","connection","$pull","hashedToken","$ne","$unset","passwordChanged","setPassword","newPlaintextPassword","Maybe","logout","Boolean","pluckAddresses","emails","map","address","forgotPassword","caseSensitiveEmail","find","toLowerCase","sendResetPasswordEmail","generateResetToken","reason","extraTokenData","includes","token","Random","tokenRecord","when","Date","Object","assign","_ensure","enroll","reset","generateVerificationToken","emailRecord","e","verified","$push","verificationTokens","push","extraParams","realEmail","url","urls","resetPassword","generateOptionsForEmail","Email","send","isDevelopment","console","log","sendEnrollmentEmail","enrollAccount","args","_loginMethod","isEnroll","tokenLifetimeMs","_getPasswordResetTokenLifetimeMs","_getPasswordEnrollTokenLifetimeMs","currentTimeMs","now","oldToken","_setLoginToken","resetToOldToken","affectedRecords","err","_clearAllLoginTokens","sendVerificationEmail","verifyEmail","t","emailsRecord","addEmail","newEmail","caseInsensitiveRegExp","RegExp","_escapeRegExp","didUpdateOwnEmail","reduce","prev","$addToSet","removeEmail","createUser","ObjectIncluding","_createUserCheckingDuplicates","forbidClientAccountCreation","createUserVerifyingEmail","callback","createIndex","unique","sparse"],"mappings":"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","sourcesContent":["import bcrypt from 'bcrypt'\nimport {Accounts} from \"meteor/accounts-base\";\n\nconst bcryptHash = Meteor.wrapAsync(bcrypt.hash);\nconst bcryptCompare = Meteor.wrapAsync(bcrypt.compare);\n\n// Utility for grabbing user\nconst getUserById = (id, options) => Meteor.users.findOne(id, Accounts._addDefaultFieldSelector(options));\n\n// User records have a 'services.password.bcrypt' field on them to hold\n// their hashed passwords.\n//\n// When the client sends a password to the server, it can either be a\n// string (the plaintext password) or an object with keys 'digest' and\n// 'algorithm' (must be \"sha-256\" for now). The Meteor client always sends\n// password objects { digest: *, algorithm: \"sha-256\" }, but DDP clients\n// that don't have access to SHA can just send plaintext passwords as\n// strings.\n//\n// When the server receives a plaintext password as a string, it always\n// hashes it with SHA256 before passing it into bcrypt. When the server\n// receives a password as an object, it asserts that the algorithm is\n// \"sha-256\" and then passes the digest to bcrypt.\n\n\nAccounts._bcryptRounds = () => Accounts._options.bcryptRounds || 10;\n\n// Given a 'password' from the client, extract the string that we should\n// bcrypt. 'password' can be one of:\n//  - String (the plaintext password)\n//  - Object with 'digest' and 'algorithm' keys. 'algorithm' must be \"sha-256\".\n//\nconst getPasswordString = password => {\n  if (typeof password === \"string\") {\n    password = SHA256(password);\n  } else { // 'password' is an object\n    if (password.algorithm !== \"sha-256\") {\n      throw new Error(\"Invalid password hash algorithm. \" +\n                      \"Only 'sha-256' is allowed.\");\n    }\n    password = password.digest;\n  }\n  return password;\n};\n\n// Use bcrypt to hash the password for storage in the database.\n// `password` can be a string (in which case it will be run through\n// SHA256 before bcrypt) or an object with properties `digest` and\n// `algorithm` (in which case we bcrypt `password.digest`).\n//\nconst hashPassword = password => {\n  password = getPasswordString(password);\n  return bcryptHash(password, Accounts._bcryptRounds());\n};\n\n// Extract the number of rounds used in the specified bcrypt hash.\nconst getRoundsFromBcryptHash = hash => {\n  let rounds;\n  if (hash) {\n    const hashSegments = hash.split('$');\n    if (hashSegments.length > 2) {\n      rounds = parseInt(hashSegments[2], 10);\n    }\n  }\n  return rounds;\n};\n\n// Check whether the provided password matches the bcrypt'ed password in\n// the database user record. `password` can be a string (in which case\n// it will be run through SHA256 before bcrypt) or an object with\n// properties `digest` and `algorithm` (in which case we bcrypt\n// `password.digest`).\n//\n// The user parameter needs at least user._id and user.services\nAccounts._checkPasswordUserFields = {_id: 1, services: 1};\n//\nAccounts._checkPassword = (user, password) => {\n  const result = {\n    userId: user._id\n  };\n\n  const formattedPassword = getPasswordString(password);\n  const hash = user.services.password.bcrypt;\n  const hashRounds = getRoundsFromBcryptHash(hash);\n\n  if (! bcryptCompare(formattedPassword, hash)) {\n    result.error = Accounts._handleError(\"Incorrect password\", false);\n  } else if (hash && Accounts._bcryptRounds() != hashRounds) {\n    // The password checks out, but the user's bcrypt hash needs to be updated.\n    Meteor.defer(() => {\n      Meteor.users.update({ _id: user._id }, {\n        $set: {\n          'services.password.bcrypt':\n            bcryptHash(formattedPassword, Accounts._bcryptRounds())\n        }\n      });\n    });\n  }\n\n  return result;\n};\nconst checkPassword = Accounts._checkPassword;\n\n///\n/// LOGIN\n///\n\n\n/**\n * @summary Finds the user with the specified username.\n * First tries to match username case sensitively; if that fails, it\n * tries case insensitively; but if more than one user matches the case\n * insensitive search, it returns null.\n * @locus Server\n * @param {String} username The username to look for\n * @param {Object} [options]\n * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.\n * @returns {Object} A user if found, else null\n * @importFromPackage accounts-base\n */\nAccounts.findUserByUsername =\n  (username, options) => Accounts._findUserByQuery({ username }, options);\n\n/**\n * @summary Finds the user with the specified email.\n * First tries to match email case sensitively; if that fails, it\n * tries case insensitively; but if more than one user matches the case\n * insensitive search, it returns null.\n * @locus Server\n * @param {String} email The email address to look for\n * @param {Object} [options]\n * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.\n * @returns {Object} A user if found, else null\n * @importFromPackage accounts-base\n */\nAccounts.findUserByEmail =\n  (email, options) => Accounts._findUserByQuery({ email }, options);\n\n// XXX maybe this belongs in the check package\nconst NonEmptyString = Match.Where(x => {\n  check(x, String);\n  return x.length > 0;\n});\n\nconst passwordValidator = Match.OneOf(\n  Match.Where(str => Match.test(str, String) && str.length <= Meteor.settings?.packages?.accounts?.passwordMaxLength || 256), {\n    digest: Match.Where(str => Match.test(str, String) && str.length === 64),\n    algorithm: Match.OneOf('sha-256')\n  }\n);\n\n// Handler to login with a password.\n//\n// The Meteor client sets options.password to an object with keys\n// 'digest' (set to SHA256(password)) and 'algorithm' (\"sha-256\").\n//\n// For other DDP clients which don't have access to SHA, the handler\n// also accepts the plaintext password in options.password as a string.\n//\n// (It might be nice if servers could turn the plaintext password\n// option off. Or maybe it should be opt-in, not opt-out?\n// Accounts.config option?)\n//\n// Note that neither password option is secure without SSL.\n//\nAccounts.registerLoginHandler(\"password\", options => {\n  if (!options.password)\n    return undefined; // don't handle\n\n  check(options, {\n    user: Accounts._userQueryValidator,\n    password: passwordValidator,\n    code: Match.Optional(NonEmptyString),\n  });\n\n\n  const user = Accounts._findUserByQuery(options.user, {fields: {\n    services: 1,\n    ...Accounts._checkPasswordUserFields,\n  }});\n  if (!user) {\n    Accounts._handleError(\"User not found\");\n  }\n\n\n  if (!user.services || !user.services.password ||\n      !user.services.password.bcrypt) {\n    Accounts._handleError(\"User has no password set\");\n  }\n\n  const result = checkPassword(user, options.password);\n  // This method is added by the package accounts-2fa\n  // First the login is validated, then the code situation is checked\n  if (\n    !result.error &&\n    Accounts._check2faEnabled?.(user)\n  ) {\n    if (!options.code) {\n      Accounts._handleError('2FA code must be informed', true, 'no-2fa-code');\n    }\n    if (\n      !Accounts._isTokenValid(\n        user.services.twoFactorAuthentication.secret,\n        options.code\n      )\n    ) {\n      Accounts._handleError('Invalid 2FA code', true, 'invalid-2fa-code');\n    }\n  }\n\n  return result;\n});\n\n///\n/// CHANGING\n///\n\n/**\n * @summary Change a user's username. Use this instead of updating the\n * database directly. The operation will fail if there is an existing user\n * with a username only differing in case.\n * @locus Server\n * @param {String} userId The ID of the user to update.\n * @param {String} newUsername A new username for the user.\n * @importFromPackage accounts-base\n */\nAccounts.setUsername = (userId, newUsername) => {\n  check(userId, NonEmptyString);\n  check(newUsername, NonEmptyString);\n\n  const user = getUserById(userId, {fields: {\n    username: 1,\n  }});\n  if (!user) {\n    Accounts._handleError(\"User not found\");\n  }\n\n  const oldUsername = user.username;\n\n  // Perform a case insensitive check for duplicates before update\n  Accounts._checkForCaseInsensitiveDuplicates('username',\n    'Username', newUsername, user._id);\n\n  Meteor.users.update({_id: user._id}, {$set: {username: newUsername}});\n\n  // Perform another check after update, in case a matching user has been\n  // inserted in the meantime\n  try {\n    Accounts._checkForCaseInsensitiveDuplicates('username',\n      'Username', newUsername, user._id);\n  } catch (ex) {\n    // Undo update if the check fails\n    Meteor.users.update({_id: user._id}, {$set: {username: oldUsername}});\n    throw ex;\n  }\n};\n\n// Let the user change their own password if they know the old\n// password. `oldPassword` and `newPassword` should be objects with keys\n// `digest` and `algorithm` (representing the SHA256 of the password).\nMeteor.methods({changePassword: function (oldPassword, newPassword) {\n  check(oldPassword, passwordValidator);\n  check(newPassword, passwordValidator);\n\n  if (!this.userId) {\n    throw new Meteor.Error(401, \"Must be logged in\");\n  }\n\n  const user = getUserById(this.userId, {fields: {\n    services: 1,\n    ...Accounts._checkPasswordUserFields,\n  }});\n  if (!user) {\n    Accounts._handleError(\"User not found\");\n  }\n\n  if (!user.services || !user.services.password || !user.services.password.bcrypt) {\n    Accounts._handleError(\"User has no password set\");\n  }\n\n  const result = checkPassword(user, oldPassword);\n  if (result.error) {\n    throw result.error;\n  }\n\n  const hashed = hashPassword(newPassword);\n\n  // It would be better if this removed ALL existing tokens and replaced\n  // the token for the current connection with a new one, but that would\n  // be tricky, so we'll settle for just replacing all tokens other than\n  // the one for the current connection.\n  const currentToken = Accounts._getLoginToken(this.connection.id);\n  Meteor.users.update(\n    { _id: this.userId },\n    {\n      $set: { 'services.password.bcrypt': hashed },\n      $pull: {\n        'services.resume.loginTokens': { hashedToken: { $ne: currentToken } }\n      },\n      $unset: { 'services.password.reset': 1 }\n    }\n  );\n\n  return {passwordChanged: true};\n}});\n\n\n// Force change the users password.\n\n/**\n * @summary Forcibly change the password for a user.\n * @locus Server\n * @param {String} userId The id of the user to update.\n * @param {String} newPassword A new password for the user.\n * @param {Object} [options]\n * @param {Object} options.logout Logout all current connections with this userId (default: true)\n * @importFromPackage accounts-base\n */\nAccounts.setPassword = (userId, newPlaintextPassword, options) => {\n  check(userId, String)\n  check(newPlaintextPassword, Match.Where(str => Match.test(str, String) && str.length <= Meteor.settings?.packages?.accounts?.passwordMaxLength || 256))\n  check(options, Match.Maybe({ logout: Boolean }))\n  options = { logout: true , ...options };\n\n  const user = getUserById(userId, {fields: {_id: 1}});\n  if (!user) {\n    throw new Meteor.Error(403, \"User not found\");\n  }\n\n  const update = {\n    $unset: {\n      'services.password.reset': 1\n    },\n    $set: {'services.password.bcrypt': hashPassword(newPlaintextPassword)}\n  };\n\n  if (options.logout) {\n    update.$unset['services.resume.loginTokens'] = 1;\n  }\n\n  Meteor.users.update({_id: user._id}, update);\n};\n\n\n///\n/// RESETTING VIA EMAIL\n///\n\n// Utility for plucking addresses from emails\nconst pluckAddresses = (emails = []) => emails.map(email => email.address);\n\n// Method called by a user to request a password reset email. This is\n// the start of the reset process.\nMeteor.methods({forgotPassword: options => {\n  check(options, {email: String})\n\n  const user = Accounts.findUserByEmail(options.email, { fields: { emails: 1 } });\n\n  if (!user) {\n    Accounts._handleError(\"User not found\");\n  }\n\n  const emails = pluckAddresses(user.emails);\n  const caseSensitiveEmail = emails.find(\n    email => email.toLowerCase() === options.email.toLowerCase()\n  );\n\n  Accounts.sendResetPasswordEmail(user._id, caseSensitiveEmail);\n}});\n\n/**\n * @summary Generates a reset token and saves it into the database.\n * @locus Server\n * @param {String} userId The id of the user to generate the reset token for.\n * @param {String} email Which address of the user to generate the reset token for. This address must be in the user's `emails` list. If `null`, defaults to the first email in the list.\n * @param {String} reason `resetPassword` or `enrollAccount`.\n * @param {Object} [extraTokenData] Optional additional data to be added into the token record.\n * @returns {Object} Object with {email, user, token} values.\n * @importFromPackage accounts-base\n */\nAccounts.generateResetToken = (userId, email, reason, extraTokenData) => {\n  // Make sure the user exists, and email is one of their addresses.\n  // Don't limit the fields in the user object since the user is returned\n  // by the function and some other fields might be used elsewhere.\n  const user = getUserById(userId);\n  if (!user) {\n    Accounts._handleError(\"Can't find user\");\n  }\n\n  // pick the first email if we weren't passed an email.\n  if (!email && user.emails && user.emails[0]) {\n    email = user.emails[0].address;\n  }\n\n  // make sure we have a valid email\n  if (!email ||\n    !(pluckAddresses(user.emails).includes(email))) {\n    Accounts._handleError(\"No such email for user.\");\n  }\n\n  const token = Random.secret();\n  const tokenRecord = {\n    token,\n    email,\n    when: new Date()\n  };\n\n  if (reason === 'resetPassword') {\n    tokenRecord.reason = 'reset';\n  } else if (reason === 'enrollAccount') {\n    tokenRecord.reason = 'enroll';\n  } else if (reason) {\n    // fallback so that this function can be used for unknown reasons as well\n    tokenRecord.reason = reason;\n  }\n\n  if (extraTokenData) {\n    Object.assign(tokenRecord, extraTokenData);\n  }\n  // if this method is called from the enroll account work-flow then\n  // store the token record in 'services.password.enroll' db field\n  // else store the token record in in 'services.password.reset' db field\n  if(reason === 'enrollAccount') {\n    Meteor.users.update({_id: user._id}, {\n      $set : {\n        'services.password.enroll': tokenRecord\n      }\n    });\n    // before passing to template, update user object with new token\n    Meteor._ensure(user, 'services', 'password').enroll = tokenRecord;\n  } else {\n    Meteor.users.update({_id: user._id}, {\n      $set : {\n        'services.password.reset': tokenRecord\n      }\n    });\n    // before passing to template, update user object with new token\n    Meteor._ensure(user, 'services', 'password').reset = tokenRecord;\n  }\n\n  return {email, user, token};\n};\n\n/**\n * @summary Generates an e-mail verification token and saves it into the database.\n * @locus Server\n * @param {String} userId The id of the user to generate the  e-mail verification token for.\n * @param {String} email Which address of the user to generate the e-mail verification token for. This address must be in the user's `emails` list. If `null`, defaults to the first unverified email in the list.\n * @param {Object} [extraTokenData] Optional additional data to be added into the token record.\n * @returns {Object} Object with {email, user, token} values.\n * @importFromPackage accounts-base\n */\nAccounts.generateVerificationToken = (userId, email, extraTokenData) => {\n  // Make sure the user exists, and email is one of their addresses.\n  // Don't limit the fields in the user object since the user is returned\n  // by the function and some other fields might be used elsewhere.\n  const user = getUserById(userId);\n  if (!user) {\n    Accounts._handleError(\"Can't find user\");\n  }\n\n  // pick the first unverified email if we weren't passed an email.\n  if (!email) {\n    const emailRecord = (user.emails || []).find(e => !e.verified);\n    email = (emailRecord || {}).address;\n\n    if (!email) {\n      Accounts._handleError(\"That user has no unverified email addresses.\");\n    }\n  }\n\n  // make sure we have a valid email\n  if (!email ||\n    !(pluckAddresses(user.emails).includes(email))) {\n    Accounts._handleError(\"No such email for user.\");\n  }\n\n  const token = Random.secret();\n  const tokenRecord = {\n    token,\n    // TODO: This should probably be renamed to \"email\" to match reset token record.\n    address: email,\n    when: new Date()\n  };\n\n  if (extraTokenData) {\n    Object.assign(tokenRecord, extraTokenData);\n  }\n\n  Meteor.users.update({_id: user._id}, {$push: {\n    'services.email.verificationTokens': tokenRecord\n  }});\n\n  // before passing to template, update user object with new token\n  Meteor._ensure(user, 'services', 'email');\n  if (!user.services.email.verificationTokens) {\n    user.services.email.verificationTokens = [];\n  }\n  user.services.email.verificationTokens.push(tokenRecord);\n\n  return {email, user, token};\n};\n\n\n// send the user an email with a link that when opened allows the user\n// to set a new password, without the old password.\n\n/**\n * @summary Send an email with a link the user can use to reset their password.\n * @locus Server\n * @param {String} userId The id of the user to send email to.\n * @param {String} [email] Optional. Which address of the user's to send the email to. This address must be in the user's `emails` list. Defaults to the first email in the list.\n * @param {Object} [extraTokenData] Optional additional data to be added into the token record.\n * @param {Object} [extraParams] Optional additional params to be added to the reset url.\n * @returns {Object} Object with {email, user, token, url, options} values.\n * @importFromPackage accounts-base\n */\nAccounts.sendResetPasswordEmail = (userId, email, extraTokenData, extraParams) => {\n  const {email: realEmail, user, token} =\n    Accounts.generateResetToken(userId, email, 'resetPassword', extraTokenData);\n  const url = Accounts.urls.resetPassword(token, extraParams);\n  const options = Accounts.generateOptionsForEmail(realEmail, user, url, 'resetPassword');\n  Email.send(options);\n  if (Meteor.isDevelopment) {\n    console.log(`\\nReset password URL: ${url}`);\n  }\n  return {email: realEmail, user, token, url, options};\n};\n\n// send the user an email informing them that their account was created, with\n// a link that when opened both marks their email as verified and forces them\n// to choose their password. The email must be one of the addresses in the\n// user's emails field, or undefined to pick the first email automatically.\n//\n// This is not called automatically. It must be called manually if you\n// want to use enrollment emails.\n\n/**\n * @summary Send an email with a link the user can use to set their initial password.\n * @locus Server\n * @param {String} userId The id of the user to send email to.\n * @param {String} [email] Optional. Which address of the user's to send the email to. This address must be in the user's `emails` list. Defaults to the first email in the list.\n * @param {Object} [extraTokenData] Optional additional data to be added into the token record.\n * @param {Object} [extraParams] Optional additional params to be added to the enrollment url.\n * @returns {Object} Object with {email, user, token, url, options} values.\n * @importFromPackage accounts-base\n */\nAccounts.sendEnrollmentEmail = (userId, email, extraTokenData, extraParams) => {\n  const {email: realEmail, user, token} =\n    Accounts.generateResetToken(userId, email, 'enrollAccount', extraTokenData);\n  const url = Accounts.urls.enrollAccount(token, extraParams);\n  const options = Accounts.generateOptionsForEmail(realEmail, user, url, 'enrollAccount');\n  Email.send(options);\n  if (Meteor.isDevelopment) {\n    console.log(`\\nEnrollment email URL: ${url}`);\n  }\n  return {email: realEmail, user, token, url, options};\n};\n\n\n// Take token from sendResetPasswordEmail or sendEnrollmentEmail, change\n// the users password, and log them in.\nMeteor.methods({resetPassword: function (...args) {\n  const token = args[0];\n  const newPassword = args[1];\n  return Accounts._loginMethod(\n    this,\n    \"resetPassword\",\n    args,\n    \"password\",\n    () => {\n      check(token, String);\n      check(newPassword, passwordValidator);\n\n      let user = Meteor.users.findOne(\n        {\"services.password.reset.token\": token},\n        {fields: {\n          services: 1,\n          emails: 1,\n        }}\n      );\n\n      let isEnroll = false;\n      // if token is in services.password.reset db field implies\n      // this method is was not called from enroll account workflow\n      // else this method is called from enroll account workflow\n      if(!user) {\n        user = Meteor.users.findOne(\n          {\"services.password.enroll.token\": token},\n          {fields: {\n            services: 1,\n            emails: 1,\n          }}\n        );\n        isEnroll = true;\n      }\n      if (!user) {\n        throw new Meteor.Error(403, \"Token expired\");\n      }\n      let tokenRecord = {};\n      if(isEnroll) {\n        tokenRecord = user.services.password.enroll;\n      } else {\n        tokenRecord = user.services.password.reset;\n      }\n      const { when, email } = tokenRecord;\n      let tokenLifetimeMs = Accounts._getPasswordResetTokenLifetimeMs();\n      if (isEnroll) {\n        tokenLifetimeMs = Accounts._getPasswordEnrollTokenLifetimeMs();\n      }\n      const currentTimeMs = Date.now();\n      if ((currentTimeMs - when) > tokenLifetimeMs)\n        throw new Meteor.Error(403, \"Token expired\");\n      if (!(pluckAddresses(user.emails).includes(email)))\n        return {\n          userId: user._id,\n          error: new Meteor.Error(403, \"Token has invalid email address\")\n        };\n\n      const hashed = hashPassword(newPassword);\n\n      // NOTE: We're about to invalidate tokens on the user, who we might be\n      // logged in as. Make sure to avoid logging ourselves out if this\n      // happens. But also make sure not to leave the connection in a state\n      // of having a bad token set if things fail.\n      const oldToken = Accounts._getLoginToken(this.connection.id);\n      Accounts._setLoginToken(user._id, this.connection, null);\n      const resetToOldToken = () =>\n        Accounts._setLoginToken(user._id, this.connection, oldToken);\n\n      try {\n        // Update the user record by:\n        // - Changing the password to the new one\n        // - Forgetting about the reset token or enroll token that was just used\n        // - Verifying their email, since they got the password reset via email.\n        let affectedRecords = {};\n        // if reason is enroll then check services.password.enroll.token field for affected records\n        if(isEnroll) {\n          affectedRecords = Meteor.users.update(\n            {\n              _id: user._id,\n              'emails.address': email,\n              'services.password.enroll.token': token\n            },\n            {$set: {'services.password.bcrypt': hashed,\n                    'emails.$.verified': true},\n              $unset: {'services.password.enroll': 1 }});\n        } else {\n          affectedRecords = Meteor.users.update(\n            {\n              _id: user._id,\n              'emails.address': email,\n              'services.password.reset.token': token\n            },\n            {$set: {'services.password.bcrypt': hashed,\n                    'emails.$.verified': true},\n              $unset: {'services.password.reset': 1 }});\n        }\n        if (affectedRecords !== 1)\n          return {\n            userId: user._id,\n            error: new Meteor.Error(403, \"Invalid email\")\n          };\n      } catch (err) {\n        resetToOldToken();\n        throw err;\n      }\n\n      // Replace all valid login tokens with new ones (changing\n      // password should invalidate existing sessions).\n      Accounts._clearAllLoginTokens(user._id);\n\n      return {userId: user._id};\n    }\n  );\n}});\n\n///\n/// EMAIL VERIFICATION\n///\n\n\n// send the user an email with a link that when opened marks that\n// address as verified\n\n/**\n * @summary Send an email with a link the user can use verify their email address.\n * @locus Server\n * @param {String} userId The id of the user to send email to.\n * @param {String} [email] Optional. Which address of the user's to send the email to. This address must be in the user's `emails` list. Defaults to the first unverified email in the list.\n * @param {Object} [extraTokenData] Optional additional data to be added into the token record.\n * @param {Object} [extraParams] Optional additional params to be added to the verification url.\n *\n * @returns {Object} Object with {email, user, token, url, options} values.\n * @importFromPackage accounts-base\n */\nAccounts.sendVerificationEmail = (userId, email, extraTokenData, extraParams) => {\n  // XXX Also generate a link using which someone can delete this\n  // account if they own said address but weren't those who created\n  // this account.\n\n  const {email: realEmail, user, token} =\n    Accounts.generateVerificationToken(userId, email, extraTokenData);\n  const url = Accounts.urls.verifyEmail(token, extraParams);\n  const options = Accounts.generateOptionsForEmail(realEmail, user, url, 'verifyEmail');\n  Email.send(options);\n  if (Meteor.isDevelopment) {\n    console.log(`\\nVerification email URL: ${url}`);\n  }\n  return {email: realEmail, user, token, url, options};\n};\n\n// Take token from sendVerificationEmail, mark the email as verified,\n// and log them in.\nMeteor.methods({verifyEmail: function (...args) {\n  const token = args[0];\n  return Accounts._loginMethod(\n    this,\n    \"verifyEmail\",\n    args,\n    \"password\",\n    () => {\n      check(token, String);\n\n      const user = Meteor.users.findOne(\n        {'services.email.verificationTokens.token': token},\n        {fields: {\n          services: 1,\n          emails: 1,\n        }}\n      );\n      if (!user)\n        throw new Meteor.Error(403, \"Verify email link expired\");\n\n        const tokenRecord = user.services.email.verificationTokens.find(\n          t => t.token == token\n        );\n      if (!tokenRecord)\n        return {\n          userId: user._id,\n          error: new Meteor.Error(403, \"Verify email link expired\")\n        };\n\n      const emailsRecord = user.emails.find(\n        e => e.address == tokenRecord.address\n      );\n      if (!emailsRecord)\n        return {\n          userId: user._id,\n          error: new Meteor.Error(403, \"Verify email link is for unknown address\")\n        };\n\n      // By including the address in the query, we can use 'emails.$' in the\n      // modifier to get a reference to the specific object in the emails\n      // array. See\n      // http://www.mongodb.org/display/DOCS/Updating/#Updating-The%24positionaloperator)\n      // http://www.mongodb.org/display/DOCS/Updating#Updating-%24pull\n      Meteor.users.update(\n        {_id: user._id,\n         'emails.address': tokenRecord.address},\n        {$set: {'emails.$.verified': true},\n         $pull: {'services.email.verificationTokens': {address: tokenRecord.address}}});\n\n      return {userId: user._id};\n    }\n  );\n}});\n\n/**\n * @summary Add an email address for a user. Use this instead of directly\n * updating the database. The operation will fail if there is a different user\n * with an email only differing in case. If the specified user has an existing\n * email only differing in case however, we replace it.\n * @locus Server\n * @param {String} userId The ID of the user to update.\n * @param {String} newEmail A new email address for the user.\n * @param {Boolean} [verified] Optional - whether the new email address should\n * be marked as verified. Defaults to false.\n * @importFromPackage accounts-base\n */\nAccounts.addEmail = (userId, newEmail, verified) => {\n  check(userId, NonEmptyString);\n  check(newEmail, NonEmptyString);\n  check(verified, Match.Optional(Boolean));\n\n  if (verified === void 0) {\n    verified = false;\n  }\n\n  const user = getUserById(userId, {fields: {emails: 1}});\n  if (!user)\n    throw new Meteor.Error(403, \"User not found\");\n\n  // Allow users to change their own email to a version with a different case\n\n  // We don't have to call checkForCaseInsensitiveDuplicates to do a case\n  // insensitive check across all emails in the database here because: (1) if\n  // there is no case-insensitive duplicate between this user and other users,\n  // then we are OK and (2) if this would create a conflict with other users\n  // then there would already be a case-insensitive duplicate and we can't fix\n  // that in this code anyway.\n  const caseInsensitiveRegExp =\n    new RegExp(`^${Meteor._escapeRegExp(newEmail)}$`, 'i');\n\n  const didUpdateOwnEmail = (user.emails || []).reduce(\n    (prev, email) => {\n      if (caseInsensitiveRegExp.test(email.address)) {\n        Meteor.users.update({\n          _id: user._id,\n          'emails.address': email.address\n        }, {$set: {\n          'emails.$.address': newEmail,\n          'emails.$.verified': verified\n        }});\n        return true;\n      } else {\n        return prev;\n      }\n    },\n    false\n  );\n\n  // In the other updates below, we have to do another call to\n  // checkForCaseInsensitiveDuplicates to make sure that no conflicting values\n  // were added to the database in the meantime. We don't have to do this for\n  // the case where the user is updating their email address to one that is the\n  // same as before, but only different because of capitalization. Read the\n  // big comment above to understand why.\n\n  if (didUpdateOwnEmail) {\n    return;\n  }\n\n  // Perform a case insensitive check for duplicates before update\n  Accounts._checkForCaseInsensitiveDuplicates('emails.address',\n    'Email', newEmail, user._id);\n\n  Meteor.users.update({\n    _id: user._id\n  }, {\n    $addToSet: {\n      emails: {\n        address: newEmail,\n        verified: verified\n      }\n    }\n  });\n\n  // Perform another check after update, in case a matching user has been\n  // inserted in the meantime\n  try {\n    Accounts._checkForCaseInsensitiveDuplicates('emails.address',\n      'Email', newEmail, user._id);\n  } catch (ex) {\n    // Undo update if the check fails\n    Meteor.users.update({_id: user._id},\n      {$pull: {emails: {address: newEmail}}});\n    throw ex;\n  }\n}\n\n/**\n * @summary Remove an email address for a user. Use this instead of updating\n * the database directly.\n * @locus Server\n * @param {String} userId The ID of the user to update.\n * @param {String} email The email address to remove.\n * @importFromPackage accounts-base\n */\nAccounts.removeEmail = (userId, email) => {\n  check(userId, NonEmptyString);\n  check(email, NonEmptyString);\n\n  const user = getUserById(userId, {fields: {_id: 1}});\n  if (!user)\n    throw new Meteor.Error(403, \"User not found\");\n\n  Meteor.users.update({_id: user._id},\n    {$pull: {emails: {address: email}}});\n}\n\n///\n/// CREATING USERS\n///\n\n// Shared createUser function called from the createUser method, both\n// if originates in client or server code. Calls user provided hooks,\n// does the actual user insertion.\n//\n// returns the user id\nconst createUser = options => {\n  // Unknown keys allowed, because a onCreateUserHook can take arbitrary\n  // options.\n  check(options, Match.ObjectIncluding({\n    username: Match.Optional(String),\n    email: Match.Optional(String),\n    password: Match.Optional(passwordValidator)\n  }));\n\n  const { username, email, password } = options;\n  if (!username && !email)\n    throw new Meteor.Error(400, \"Need to set a username or email\");\n\n  const user = {services: {}};\n  if (password) {\n    const hashed = hashPassword(password);\n    user.services.password = { bcrypt: hashed };\n  }\n\n  return Accounts._createUserCheckingDuplicates({ user, email, username, options })\n};\n\n// method for create user. Requests come from the client.\nMeteor.methods({createUser: function (...args) {\n  const options = args[0];\n  return Accounts._loginMethod(\n    this,\n    \"createUser\",\n    args,\n    \"password\",\n    () => {\n      // createUser() above does more checking.\n      check(options, Object);\n      if (Accounts._options.forbidClientAccountCreation)\n        return {\n          error: new Meteor.Error(403, \"Signups forbidden\")\n        };\n\n      const userId = Accounts.createUserVerifyingEmail(options);\n\n      // client gets logged in as the new user afterwards.\n      return {userId: userId};\n    }\n  );\n}});\n\n/**\n * @summary Creates an user and sends an email if `options.email` is informed.\n * Then if the `sendVerificationEmail` option from the `Accounts` package is\n * enabled, you'll send a verification email if `options.password` is informed,\n * otherwise you'll send an enrollment email.\n * @locus Server\n * @param {Object} options The options object to be passed down when creating\n * the user\n * @param {String} options.username A unique name for this user.\n * @param {String} options.email The user's email address.\n * @param {String} options.password The user's password. This is __not__ sent in plain text over the wire.\n * @param {Object} options.profile The user's profile, typically including the `name` field.\n * @importFromPackage accounts-base\n * */\nAccounts.createUserVerifyingEmail = (options) => {\n  options = { ...options };\n  // Create user. result contains id and token.\n  const userId = createUser(options);\n  // safety belt. createUser is supposed to throw on error. send 500 error\n  // instead of sending a verification email with empty userid.\n  if (! userId)\n    throw new Error(\"createUser failed to insert new user\");\n\n  // If `Accounts._options.sendVerificationEmail` is set, register\n  // a token to verify the user's primary email, and send it to\n  // that address.\n  if (options.email && Accounts._options.sendVerificationEmail) {\n    if (options.password) {\n      Accounts.sendVerificationEmail(userId, options.email);\n    } else {\n      Accounts.sendEnrollmentEmail(userId, options.email);\n    }\n  }\n\n  return userId;\n};\n\n// Create user directly on the server.\n//\n// Unlike the client version, this does not log you in as this user\n// after creation.\n//\n// returns userId or throws an error if it can't create\n//\n// XXX add another argument (\"server options\") that gets sent to onCreateUser,\n// which is always empty when called from the createUser method? eg, \"admin:\n// true\", which we want to prevent the client from setting, but which a custom\n// method calling Accounts.createUser could set?\n//\nAccounts.createUser = (options, callback) => {\n  options = { ...options };\n\n  // XXX allow an optional callback?\n  if (callback) {\n    throw new Error(\"Accounts.createUser with callback not supported on the server yet.\");\n  }\n\n  return createUser(options);\n};\n\n///\n/// PASSWORD-SPECIFIC INDEXES ON USERS\n///\nMeteor.users.createIndex('services.email.verificationTokens.token',\n                          { unique: true, sparse: true });\nMeteor.users.createIndex('services.password.reset.token',\n                          { unique: true, sparse: true });\nMeteor.users.createIndex('services.password.enroll.token',\n                          { unique: true, sparse: true });\n"]},"sourceType":"module","externalDependencies":{},"hash":"eeadb5d8d84d0a8c87f1005a3f9fc99271b09e88"}
