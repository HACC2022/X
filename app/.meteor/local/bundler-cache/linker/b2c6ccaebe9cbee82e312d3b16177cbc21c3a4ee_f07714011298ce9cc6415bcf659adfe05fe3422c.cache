[{"type":"js","data":"/* Imports for global scope */\n\nMongoInternals = Package.mongo.MongoInternals;\nMongo = Package.mongo.Mongo;\nReactiveVar = Package['reactive-var'].ReactiveVar;\nECMAScript = Package.ecmascript.ECMAScript;\nRoles = Package['alanning:roles'].Roles;\nCollection2 = Package['aldeed:collection2'].Collection2;\n_ = Package.underscore._;\nEJSON = Package.ejson.EJSON;\nKadira = Package['montiapm:agent'].Kadira;\nMonti = Package['montiapm:agent'].Monti;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\nWebAppInternals = Package.webapp.WebAppInternals;\nmain = Package.webapp.main;\nDDP = Package['ddp-client'].DDP;\nDDPServer = Package['ddp-server'].DDPServer;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nmeteorInstall = Package.modules.meteorInstall;\nPromise = Package.promise.Promise;\nAccounts = Package['accounts-base'].Accounts;\nAutoupdate = Package.autoupdate.Autoupdate;\n\n","servePath":"/global-imports.js"},{"type":"js","data":"var require = meteorInstall({\"imports\":{\"api\":{\"stuff\":{\"Stuff.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// imports/api/stuff/Stuff.js                                                                                      //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\nmodule.export({\n  Stuffs: () => Stuffs\n});\nlet Mongo;\nmodule.link(\"meteor/mongo\", {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 0);\nlet SimpleSchema;\nmodule.link(\"simpl-schema\", {\n  default(v) {\n    SimpleSchema = v;\n  }\n\n}, 1);\nlet Tracker;\nmodule.link(\"meteor/tracker\", {\n  Tracker(v) {\n    Tracker = v;\n  }\n\n}, 2);\n\n/**\r\n * The StuffsCollection. It encapsulates state and variable values for stuff.\r\n */\nclass StuffsCollection {\n  constructor() {\n    // The name of this collection.\n    this.name = 'StuffsCollection'; // Define the Mongo collection.\n\n    this.collection = new Mongo.Collection(this.name); // Define the structure of each document in the collection.\n\n    this.schema = new SimpleSchema({\n      name: String,\n      quantity: Number,\n      owner: String,\n      condition: {\n        type: String,\n        allowedValues: ['excellent', 'good', 'fair', 'poor'],\n        defaultValue: 'good'\n      }\n    }, {\n      tracker: Tracker\n    }); // Attach the schema to the collection, so all attempts to insert a document are checked against schema.\n\n    this.collection.attachSchema(this.schema); // Define names for publications and subscriptions\n\n    this.userPublicationName = \"\".concat(this.name, \".publication.user\");\n    this.adminPublicationName = \"\".concat(this.name, \".publication.admin\");\n  }\n\n}\n/**\r\n * The singleton instance of the StuffsCollection.\r\n * @type {StuffsCollection}\r\n */\n\n\nconst Stuffs = new StuffsCollection();\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"startup\":{\"server\":{\"Accounts.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// imports/startup/server/Accounts.js                                                                              //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Accounts;\nmodule.link(\"meteor/accounts-base\", {\n  Accounts(v) {\n    Accounts = v;\n  }\n\n}, 1);\nlet Roles;\nmodule.link(\"meteor/alanning:roles\", {\n  Roles(v) {\n    Roles = v;\n  }\n\n}, 2);\n\n/* eslint-disable no-console */\nconst createUser = (email, password, role) => {\n  console.log(\"  Creating user \".concat(email, \".\"));\n  const userID = Accounts.createUser({\n    username: email,\n    email: email,\n    password: password\n  });\n\n  if (role === 'admin') {\n    Roles.createRole(role, {\n      unlessExists: true\n    });\n    Roles.addUsersToRoles(userID, 'admin');\n  }\n}; // When running app for first time, pass a settings file to set up a default user account.\n\n\nif (Meteor.users.find().count() === 0) {\n  if (Meteor.settings.defaultAccounts) {\n    console.log('Creating the default user(s)');\n    Meteor.settings.defaultAccounts.forEach(_ref => {\n      let {\n        email,\n        password,\n        role\n      } = _ref;\n      return createUser(email, password, role);\n    });\n  } else {\n    console.log('Cannot initialize the database!  Please invoke meteor with a settings file.');\n  }\n}\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"Mongo.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// imports/startup/server/Mongo.js                                                                                 //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Stuffs;\nmodule.link(\"../../api/stuff/Stuff.js\", {\n  Stuffs(v) {\n    Stuffs = v;\n  }\n\n}, 1);\n\n/* eslint-disable no-console */\n// Initialize the database with a default data document.\nconst addData = data => {\n  console.log(\"  Adding: \".concat(data.name, \" (\").concat(data.owner, \")\"));\n  Stuffs.collection.insert(data);\n}; // Initialize the StuffsCollection if empty.\n\n\nif (Stuffs.collection.find().count() === 0) {\n  if (Meteor.settings.defaultData) {\n    console.log('Creating default data.');\n    Meteor.settings.defaultData.forEach(data => addData(data));\n  }\n}\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"Publications.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// imports/startup/server/Publications.js                                                                          //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Roles;\nmodule.link(\"meteor/alanning:roles\", {\n  Roles(v) {\n    Roles = v;\n  }\n\n}, 1);\nlet Stuffs;\nmodule.link(\"../../api/stuff/Stuff\", {\n  Stuffs(v) {\n    Stuffs = v;\n  }\n\n}, 2);\n// User-level publication.\n// If logged in, then publish documents owned by this user. Otherwise publish nothing.\nMeteor.publish(Stuffs.userPublicationName, function () {\n  if (this.userId) {\n    const username = Meteor.users.findOne(this.userId).username;\n    return Stuffs.collection.find({\n      owner: username\n    });\n  }\n\n  return this.ready();\n}); // Admin-level publication.\n// If logged in and with admin role, then publish all documents from all users. Otherwise publish nothing.\n\nMeteor.publish(Stuffs.adminPublicationName, function () {\n  if (this.userId && Roles.userIsInRole(this.userId, 'admin')) {\n    return Stuffs.collection.find();\n  }\n\n  return this.ready();\n}); // alanning:roles publication\n// Recommended code to publish roles for each user.\n\nMeteor.publish(null, function () {\n  if (this.userId) {\n    return Meteor.roleAssignment.find({\n      'user._id': this.userId\n    });\n  }\n\n  return this.ready();\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}},\"server\":{\"main.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// server/main.js                                                                                                  //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\nmodule.link(\"/imports/startup/server/Accounts\");\nmodule.link(\"/imports/startup/server/Publications\");\nmodule.link(\"/imports/startup/server/Mongo\");\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\",\n    \".mjs\",\n    \".jsx\"\n  ]\n});\n\nrequire(\"/server/main.js\");","hash":"167cecf3f54e1abe54af761dc5d1f3971babbb1c","servePath":"/app.js","sourceMap":{"version":3,"sources":["imports/api/stuff/Stuff.js","imports/startup/server/Accounts.js","imports/startup/server/Mongo.js","imports/startup/server/Publications.js","server/main.js"],"names":["module","export","Stuffs","Mongo","link","v","SimpleSchema","default","Tracker","StuffsCollection","constructor","name","collection","Collection","schema","String","quantity","Number","owner","condition","type","allowedValues","defaultValue","tracker","attachSchema","userPublicationName","adminPublicationName","Meteor","Accounts","Roles","createUser","email","password","role","console","log","userID","username","createRole","unlessExists","addUsersToRoles","users","find","count","settings","defaultAccounts","forEach","addData","data","insert","defaultData","publish","userId","findOne","ready","userIsInRole","roleAssignment"],"mappings":"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","file":"/app.js","sourcesContent":["import { Mongo } from 'meteor/mongo';\r\nimport SimpleSchema from 'simpl-schema';\r\nimport { Tracker } from 'meteor/tracker';\r\n\r\n/**\r\n * The StuffsCollection. It encapsulates state and variable values for stuff.\r\n */\r\nclass StuffsCollection {\r\n  constructor() {\r\n    // The name of this collection.\r\n    this.name = 'StuffsCollection';\r\n    // Define the Mongo collection.\r\n    this.collection = new Mongo.Collection(this.name);\r\n    // Define the structure of each document in the collection.\r\n    this.schema = new SimpleSchema({\r\n      name: String,\r\n      quantity: Number,\r\n      owner: String,\r\n      condition: {\r\n        type: String,\r\n        allowedValues: ['excellent', 'good', 'fair', 'poor'],\r\n        defaultValue: 'good',\r\n      },\r\n    }, { tracker: Tracker });\r\n    // Attach the schema to the collection, so all attempts to insert a document are checked against schema.\r\n    this.collection.attachSchema(this.schema);\r\n    // Define names for publications and subscriptions\r\n    this.userPublicationName = `${this.name}.publication.user`;\r\n    this.adminPublicationName = `${this.name}.publication.admin`;\r\n  }\r\n}\r\n\r\n/**\r\n * The singleton instance of the StuffsCollection.\r\n * @type {StuffsCollection}\r\n */\r\nexport const Stuffs = new StuffsCollection();\r\n","import { Meteor } from 'meteor/meteor';\r\nimport { Accounts } from 'meteor/accounts-base';\r\nimport { Roles } from 'meteor/alanning:roles';\r\n\r\n/* eslint-disable no-console */\r\n\r\nconst createUser = (email, password, role) => {\r\n  console.log(`  Creating user ${email}.`);\r\n  const userID = Accounts.createUser({\r\n    username: email,\r\n    email: email,\r\n    password: password,\r\n  });\r\n  if (role === 'admin') {\r\n    Roles.createRole(role, { unlessExists: true });\r\n    Roles.addUsersToRoles(userID, 'admin');\r\n  }\r\n};\r\n\r\n// When running app for first time, pass a settings file to set up a default user account.\r\nif (Meteor.users.find().count() === 0) {\r\n  if (Meteor.settings.defaultAccounts) {\r\n    console.log('Creating the default user(s)');\r\n    Meteor.settings.defaultAccounts.forEach(({ email, password, role }) => createUser(email, password, role));\r\n  } else {\r\n    console.log('Cannot initialize the database!  Please invoke meteor with a settings file.');\r\n  }\r\n}\r\n","import { Meteor } from 'meteor/meteor';\r\nimport { Stuffs } from '../../api/stuff/Stuff.js';\r\n\r\n/* eslint-disable no-console */\r\n\r\n// Initialize the database with a default data document.\r\nconst addData = (data) => {\r\n  console.log(`  Adding: ${data.name} (${data.owner})`);\r\n  Stuffs.collection.insert(data);\r\n};\r\n\r\n// Initialize the StuffsCollection if empty.\r\nif (Stuffs.collection.find().count() === 0) {\r\n  if (Meteor.settings.defaultData) {\r\n    console.log('Creating default data.');\r\n    Meteor.settings.defaultData.forEach(data => addData(data));\r\n  }\r\n}\r\n","import { Meteor } from 'meteor/meteor';\r\nimport { Roles } from 'meteor/alanning:roles';\r\nimport { Stuffs } from '../../api/stuff/Stuff';\r\n\r\n// User-level publication.\r\n// If logged in, then publish documents owned by this user. Otherwise publish nothing.\r\nMeteor.publish(Stuffs.userPublicationName, function () {\r\n  if (this.userId) {\r\n    const username = Meteor.users.findOne(this.userId).username;\r\n    return Stuffs.collection.find({ owner: username });\r\n  }\r\n  return this.ready();\r\n});\r\n\r\n// Admin-level publication.\r\n// If logged in and with admin role, then publish all documents from all users. Otherwise publish nothing.\r\nMeteor.publish(Stuffs.adminPublicationName, function () {\r\n  if (this.userId && Roles.userIsInRole(this.userId, 'admin')) {\r\n    return Stuffs.collection.find();\r\n  }\r\n  return this.ready();\r\n});\r\n\r\n// alanning:roles publication\r\n// Recommended code to publish roles for each user.\r\nMeteor.publish(null, function () {\r\n  if (this.userId) {\r\n    return Meteor.roleAssignment.find({ 'user._id': this.userId });\r\n  }\r\n  return this.ready();\r\n});\r\n","import '/imports/startup/server/Accounts';\r\nimport '/imports/startup/server/Publications';\r\nimport '/imports/startup/server/Mongo';\r\n"]}}]