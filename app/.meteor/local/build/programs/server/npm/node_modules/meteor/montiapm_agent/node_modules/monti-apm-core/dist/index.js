'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Kadira = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _axios = require('axios');

var _axios2 = _interopRequireDefault(_axios);

var _clock = require('./clock.js');

var _clock2 = _interopRequireDefault(_clock);

var _retry = require('./retry.js');

var _retry2 = _interopRequireDefault(_retry);

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var logger = (0, _debug2.default)('kadira-core:transport');

var DEFAULTS = {
  appId: '',
  appSecret: '',
  agentVersion: 'unknown',
  endpoint: 'https://enginex.kadira.io',
  hostname: 'localhost',
  clockSyncInterval: 1000 * 60,
  dataFlushInterval: 1000 * 10
};

// exporting this for if we need to get this as a NPM module.

var Kadira = exports.Kadira = function () {
  function Kadira(_options) {
    _classCallCheck(this, Kadira);

    this._options = Object.assign({}, DEFAULTS, _options);
    this._headers = {
      'content-type': 'application/json',
      accepts: 'application/json',
      'KADIRA-APP-ID': this._options.appId,
      'KADIRA-APP-SECRET': this._options.appSecret,
      'MONTI-AGENT-VERSION': this._options.agentVersion
    };

    this._clock = new _clock2.default({
      endpoint: this._options.endpoint + '/simplentp/sync'
    });

    this._clockSyncInterval = null;
  }

  _createClass(Kadira, [{
    key: 'connect',
    value: function connect() {
      var _this = this;

      logger('connecting with', this._options);
      return this._checkAuth().then(function () {
        return _this._clock.sync();
      }).then(function () {
        _this._clockSyncInterval = setInterval(function () {
          return _this._clock.sync();
        }, _this._options.clockSyncInterval);
      });
    }
  }, {
    key: 'disconnect',
    value: function disconnect() {
      logger('disconnect');
      clearInterval(this._clockSyncInterval);
    }
  }, {
    key: 'getJob',
    value: function getJob(id) {
      var data = { action: 'get', params: {} };
      Object.assign(data.params, { id: id });

      var url = this._options.endpoint + '/jobs';
      var params = {
        data: data,
        headers: this._headers
      };

      logger('get job', id);
      return this._send(url, params);
    }
  }, {
    key: 'updateJob',
    value: function updateJob(id, diff) {
      var data = { action: 'set', params: {} };
      Object.assign(data.params, diff, { id: id });

      var url = this._options.endpoint + '/jobs';
      var params = {
        data: data,
        headers: this._headers
      };

      logger('update job', id);
      return this._send(url, params);
    }

    // send the given payload to the server

  }, {
    key: 'sendData',
    value: function sendData(_payload) {
      var payload = _extends({}, _payload, {
        host: this._options.hostname
      });

      var url = this._options.endpoint;
      var data = JSON.stringify(payload);
      var params = {
        data: data,
        headers: this._headers
      };

      logger('send data - ' + data.substr(0, 50) + '...');
      return this._send(url, params);
    }
  }, {
    key: 'get',
    value: function get(path) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      var url = this._options.endpoint + path;
      var params = {
        headers: _extends({}, this._headers),
        noRetry: options.noRetry
      };
      logger('get request to ' + url);
      return this._send(url, params);
    }
  }, {
    key: 'sendStream',
    value: function sendStream(path, stream) {
      var url = this._options.endpoint + path;
      var params = {
        data: stream,
        headers: _extends({}, this._headers, {
          'content-type': 'application/octet-stream'
        })
      };

      logger('send stream to ' + url);
      return this._send(url, params);
    }

    // ping the server to check whether appId and appSecret
    // are valid and correct. Data sent inside http headers.

  }, {
    key: '_checkAuth',
    value: function _checkAuth() {
      var uri = this._options.endpoint + '/ping';
      var params = { headers: this._headers };
      return this._send(uri, params);
    }

    // communicates with the server with http
    // Also handles response http status codes and retries

  }, {
    key: '_send',
    value: function _send(url, params) {
      var retryEnabled = true;

      if (params.noRetry) {
        retryEnabled = false;
        delete params.noRetry;
      }

      return (0, _retry2.default)(function () {
        return new Promise(function (resolve, reject) {
          (0, _axios2.default)(_extends({
            url: url,
            // Axios defaults to 10mb. Increases limit to 100mb.
            maxBodyLength: 100 * 1024 * 1024
          }, params, {
            method: params.method || 'POST'
          })).then(function (res) {
            return resolve(res.data);
          }).catch(function (err) {
            if (err.response && err.response.status) {
              var status = err.response.status;

              if (status === 401) {
                logger('Error: Unauthorized');
                return reject(new _retry.ByPassRetryError('Unauthorized'));
              } else if (status >= 400 && status < 500) {
                var _message = 'Agent Error: ' + status;
                logger('Error: ' + _message);
                return reject(new _retry.ByPassRetryError(_message));
              }

              var message = 'Request failed: ' + status;
              var ErrConstructor = retryEnabled ? Error : _retry.ByPassRetryError;

              logger('Error: ' + message);
              return reject(new ErrConstructor(message));
            }

            if (!retryEnabled) {
              var oldErr = err;
              // eslint-disable-next-line no-param-reassign
              err = new _retry.ByPassRetryError(oldErr.message);
              err.stack = oldErr.stack;
            }

            return reject(err);
          });
        });
      });
    }
  }]);

  return Kadira;
}();

exports.default = Kadira;